import { jsx as c, Fragment as J, jsxs as k } from "react/jsx-runtime";
import * as S from "react";
import me, { createContext as $n, useContext as Mn, useEffect as qt, useState as _, useCallback as q } from "react";
import "react-dom";
import { ConnectKitButton as Wn, getDefaultConfig as Hn, ConnectKitProvider as Vn } from "connectkit";
import { useConfig as jn, useSignMessage as Dn, useDisconnect as Jn, useChainId as Kn, createConfig as qn, http as $, WagmiProvider as Yn } from "wagmi";
import { SiweMessage as wt } from "siwe";
import * as G from "@radix-ui/react-alert-dialog";
import vt from "axios";
import { create as Yt } from "zustand";
import { QueryClient as Xn, QueryClientProvider as Zn } from "@tanstack/react-query";
function Xt(e) {
  var t, n, r = "";
  if (typeof e == "string" || typeof e == "number") r += e;
  else if (typeof e == "object") if (Array.isArray(e)) {
    var s = e.length;
    for (t = 0; t < s; t++) e[t] && (n = Xt(e[t])) && (r && (r += " "), r += n);
  } else for (n in e) e[n] && (r && (r += " "), r += n);
  return r;
}
function Zt() {
  for (var e, t, n = 0, r = "", s = arguments.length; n < s; n++) (e = arguments[n]) && (t = Xt(e)) && (r && (r += " "), r += t);
  return r;
}
const ct = "-", Qn = (e) => {
  const t = tr(e), {
    conflictingClassGroups: n,
    conflictingClassGroupModifiers: r
  } = e;
  return {
    getClassGroupId: (i) => {
      const a = i.split(ct);
      return a[0] === "" && a.length !== 1 && a.shift(), Qt(a, t) || er(i);
    },
    getConflictingClassGroupIds: (i, a) => {
      const l = n[i] || [];
      return a && r[i] ? [...l, ...r[i]] : l;
    }
  };
}, Qt = (e, t) => {
  var i;
  if (e.length === 0)
    return t.classGroupId;
  const n = e[0], r = t.nextPart.get(n), s = r ? Qt(e.slice(1), r) : void 0;
  if (s)
    return s;
  if (t.validators.length === 0)
    return;
  const o = e.join(ct);
  return (i = t.validators.find(({
    validator: a
  }) => a(o))) == null ? void 0 : i.classGroupId;
}, Ct = /^\[(.+)\]$/, er = (e) => {
  if (Ct.test(e)) {
    const t = Ct.exec(e)[1], n = t == null ? void 0 : t.substring(0, t.indexOf(":"));
    if (n)
      return "arbitrary.." + n;
  }
}, tr = (e) => {
  const {
    theme: t,
    prefix: n
  } = e, r = {
    nextPart: /* @__PURE__ */ new Map(),
    validators: []
  };
  return rr(Object.entries(e.classGroups), n).forEach(([o, i]) => {
    Xe(i, r, o, t);
  }), r;
}, Xe = (e, t, n, r) => {
  e.forEach((s) => {
    if (typeof s == "string") {
      const o = s === "" ? t : It(t, s);
      o.classGroupId = n;
      return;
    }
    if (typeof s == "function") {
      if (nr(s)) {
        Xe(s(r), t, n, r);
        return;
      }
      t.validators.push({
        validator: s,
        classGroupId: n
      });
      return;
    }
    Object.entries(s).forEach(([o, i]) => {
      Xe(i, It(t, o), n, r);
    });
  });
}, It = (e, t) => {
  let n = e;
  return t.split(ct).forEach((r) => {
    n.nextPart.has(r) || n.nextPart.set(r, {
      nextPart: /* @__PURE__ */ new Map(),
      validators: []
    }), n = n.nextPart.get(r);
  }), n;
}, nr = (e) => e.isThemeGetter, rr = (e, t) => t ? e.map(([n, r]) => {
  const s = r.map((o) => typeof o == "string" ? t + o : typeof o == "object" ? Object.fromEntries(Object.entries(o).map(([i, a]) => [t + i, a])) : o);
  return [n, s];
}) : e, sr = (e) => {
  if (e < 1)
    return {
      get: () => {
      },
      set: () => {
      }
    };
  let t = 0, n = /* @__PURE__ */ new Map(), r = /* @__PURE__ */ new Map();
  const s = (o, i) => {
    n.set(o, i), t++, t > e && (t = 0, r = n, n = /* @__PURE__ */ new Map());
  };
  return {
    get(o) {
      let i = n.get(o);
      if (i !== void 0)
        return i;
      if ((i = r.get(o)) !== void 0)
        return s(o, i), i;
    },
    set(o, i) {
      n.has(o) ? n.set(o, i) : s(o, i);
    }
  };
}, en = "!", or = (e) => {
  const {
    separator: t,
    experimentalParseClassName: n
  } = e, r = t.length === 1, s = t[0], o = t.length, i = (a) => {
    const l = [];
    let d = 0, h = 0, u;
    for (let b = 0; b < a.length; b++) {
      let y = a[b];
      if (d === 0) {
        if (y === s && (r || a.slice(b, b + o) === t)) {
          l.push(a.slice(h, b)), h = b + o;
          continue;
        }
        if (y === "/") {
          u = b;
          continue;
        }
      }
      y === "[" ? d++ : y === "]" && d--;
    }
    const f = l.length === 0 ? a : a.substring(h), m = f.startsWith(en), x = m ? f.substring(1) : f, p = u && u > h ? u - h : void 0;
    return {
      modifiers: l,
      hasImportantModifier: m,
      baseClassName: x,
      maybePostfixModifierPosition: p
    };
  };
  return n ? (a) => n({
    className: a,
    parseClassName: i
  }) : i;
}, ir = (e) => {
  if (e.length <= 1)
    return e;
  const t = [];
  let n = [];
  return e.forEach((r) => {
    r[0] === "[" ? (t.push(...n.sort(), r), n = []) : n.push(r);
  }), t.push(...n.sort()), t;
}, ar = (e) => ({
  cache: sr(e.cacheSize),
  parseClassName: or(e),
  ...Qn(e)
}), cr = /\s+/, lr = (e, t) => {
  const {
    parseClassName: n,
    getClassGroupId: r,
    getConflictingClassGroupIds: s
  } = t, o = [], i = e.trim().split(cr);
  let a = "";
  for (let l = i.length - 1; l >= 0; l -= 1) {
    const d = i[l], {
      modifiers: h,
      hasImportantModifier: u,
      baseClassName: f,
      maybePostfixModifierPosition: m
    } = n(d);
    let x = !!m, p = r(x ? f.substring(0, m) : f);
    if (!p) {
      if (!x) {
        a = d + (a.length > 0 ? " " + a : a);
        continue;
      }
      if (p = r(f), !p) {
        a = d + (a.length > 0 ? " " + a : a);
        continue;
      }
      x = !1;
    }
    const b = ir(h).join(":"), y = u ? b + en : b, v = y + p;
    if (o.includes(v))
      continue;
    o.push(v);
    const N = s(p, x);
    for (let B = 0; B < N.length; ++B) {
      const U = N[B];
      o.push(y + U);
    }
    a = d + (a.length > 0 ? " " + a : a);
  }
  return a;
};
function dr() {
  let e = 0, t, n, r = "";
  for (; e < arguments.length; )
    (t = arguments[e++]) && (n = tn(t)) && (r && (r += " "), r += n);
  return r;
}
const tn = (e) => {
  if (typeof e == "string")
    return e;
  let t, n = "";
  for (let r = 0; r < e.length; r++)
    e[r] && (t = tn(e[r])) && (n && (n += " "), n += t);
  return n;
};
function ur(e, ...t) {
  let n, r, s, o = i;
  function i(l) {
    const d = t.reduce((h, u) => u(h), e());
    return n = ar(d), r = n.cache.get, s = n.cache.set, o = a, a(l);
  }
  function a(l) {
    const d = r(l);
    if (d)
      return d;
    const h = lr(l, n);
    return s(l, h), h;
  }
  return function() {
    return o(dr.apply(null, arguments));
  };
}
const T = (e) => {
  const t = (n) => n[e] || [];
  return t.isThemeGetter = !0, t;
}, nn = /^\[(?:([a-z-]+):)?(.+)\]$/i, fr = /^\d+\/\d+$/, hr = /* @__PURE__ */ new Set(["px", "full", "screen"]), pr = /^(\d+(\.\d+)?)?(xs|sm|md|lg|xl)$/, mr = /\d+(%|px|r?em|[sdl]?v([hwib]|min|max)|pt|pc|in|cm|mm|cap|ch|ex|r?lh|cq(w|h|i|b|min|max))|\b(calc|min|max|clamp)\(.+\)|^0$/, gr = /^(rgba?|hsla?|hwb|(ok)?(lab|lch))\(.+\)$/, br = /^(inset_)?-?((\d+)?\.?(\d+)[a-z]+|0)_-?((\d+)?\.?(\d+)[a-z]+|0)/, yr = /^(url|image|image-set|cross-fade|element|(repeating-)?(linear|radial|conic)-gradient)\(.+\)$/, j = (e) => he(e) || hr.has(e) || fr.test(e), Y = (e) => ge(e, "length", Pr), he = (e) => !!e && !Number.isNaN(Number(e)), Je = (e) => ge(e, "number", he), Ee = (e) => !!e && Number.isInteger(Number(e)), xr = (e) => e.endsWith("%") && he(e.slice(0, -1)), C = (e) => nn.test(e), X = (e) => pr.test(e), wr = /* @__PURE__ */ new Set(["length", "size", "percentage"]), vr = (e) => ge(e, wr, rn), Cr = (e) => ge(e, "position", rn), Ir = /* @__PURE__ */ new Set(["image", "url"]), kr = (e) => ge(e, Ir, Ar), Er = (e) => ge(e, "", Nr), Pe = () => !0, ge = (e, t, n) => {
  const r = nn.exec(e);
  return r ? r[1] ? typeof t == "string" ? r[1] === t : t.has(r[1]) : n(r[2]) : !1;
}, Pr = (e) => (
  // `colorFunctionRegex` check is necessary because color functions can have percentages in them which which would be incorrectly classified as lengths.
  // For example, `hsl(0 0% 0%)` would be classified as a length without this check.
  // I could also use lookbehind assertion in `lengthUnitRegex` but that isn't supported widely enough.
  mr.test(e) && !gr.test(e)
), rn = () => !1, Nr = (e) => br.test(e), Ar = (e) => yr.test(e), Tr = () => {
  const e = T("colors"), t = T("spacing"), n = T("blur"), r = T("brightness"), s = T("borderColor"), o = T("borderRadius"), i = T("borderSpacing"), a = T("borderWidth"), l = T("contrast"), d = T("grayscale"), h = T("hueRotate"), u = T("invert"), f = T("gap"), m = T("gradientColorStops"), x = T("gradientColorStopPositions"), p = T("inset"), b = T("margin"), y = T("opacity"), v = T("padding"), N = T("saturate"), B = T("scale"), U = T("sepia"), M = T("skew"), we = T("space"), _e = T("translate"), ve = () => ["auto", "contain", "none"], Ce = () => ["auto", "hidden", "clip", "visible", "scroll"], Ie = () => ["auto", C, t], A = () => [C, t], ze = () => ["", j, Y], ce = () => ["auto", he, C], Oe = () => ["bottom", "center", "left", "left-bottom", "left-top", "right", "right-bottom", "right-top", "top"], le = () => ["solid", "dashed", "dotted", "double", "none"], Ue = () => ["normal", "multiply", "screen", "overlay", "darken", "lighten", "color-dodge", "color-burn", "hard-light", "soft-light", "difference", "exclusion", "hue", "saturation", "color", "luminosity"], ke = () => ["start", "end", "center", "between", "around", "evenly", "stretch"], K = () => ["", "0", C], Ge = () => ["auto", "avoid", "all", "avoid-page", "page", "left", "right", "column"], F = () => [he, C];
  return {
    cacheSize: 500,
    separator: ":",
    theme: {
      colors: [Pe],
      spacing: [j, Y],
      blur: ["none", "", X, C],
      brightness: F(),
      borderColor: [e],
      borderRadius: ["none", "", "full", X, C],
      borderSpacing: A(),
      borderWidth: ze(),
      contrast: F(),
      grayscale: K(),
      hueRotate: F(),
      invert: K(),
      gap: A(),
      gradientColorStops: [e],
      gradientColorStopPositions: [xr, Y],
      inset: Ie(),
      margin: Ie(),
      opacity: F(),
      padding: A(),
      saturate: F(),
      scale: F(),
      sepia: K(),
      skew: F(),
      space: A(),
      translate: A()
    },
    classGroups: {
      // Layout
      /**
       * Aspect Ratio
       * @see https://tailwindcss.com/docs/aspect-ratio
       */
      aspect: [{
        aspect: ["auto", "square", "video", C]
      }],
      /**
       * Container
       * @see https://tailwindcss.com/docs/container
       */
      container: ["container"],
      /**
       * Columns
       * @see https://tailwindcss.com/docs/columns
       */
      columns: [{
        columns: [X]
      }],
      /**
       * Break After
       * @see https://tailwindcss.com/docs/break-after
       */
      "break-after": [{
        "break-after": Ge()
      }],
      /**
       * Break Before
       * @see https://tailwindcss.com/docs/break-before
       */
      "break-before": [{
        "break-before": Ge()
      }],
      /**
       * Break Inside
       * @see https://tailwindcss.com/docs/break-inside
       */
      "break-inside": [{
        "break-inside": ["auto", "avoid", "avoid-page", "avoid-column"]
      }],
      /**
       * Box Decoration Break
       * @see https://tailwindcss.com/docs/box-decoration-break
       */
      "box-decoration": [{
        "box-decoration": ["slice", "clone"]
      }],
      /**
       * Box Sizing
       * @see https://tailwindcss.com/docs/box-sizing
       */
      box: [{
        box: ["border", "content"]
      }],
      /**
       * Display
       * @see https://tailwindcss.com/docs/display
       */
      display: ["block", "inline-block", "inline", "flex", "inline-flex", "table", "inline-table", "table-caption", "table-cell", "table-column", "table-column-group", "table-footer-group", "table-header-group", "table-row-group", "table-row", "flow-root", "grid", "inline-grid", "contents", "list-item", "hidden"],
      /**
       * Floats
       * @see https://tailwindcss.com/docs/float
       */
      float: [{
        float: ["right", "left", "none", "start", "end"]
      }],
      /**
       * Clear
       * @see https://tailwindcss.com/docs/clear
       */
      clear: [{
        clear: ["left", "right", "both", "none", "start", "end"]
      }],
      /**
       * Isolation
       * @see https://tailwindcss.com/docs/isolation
       */
      isolation: ["isolate", "isolation-auto"],
      /**
       * Object Fit
       * @see https://tailwindcss.com/docs/object-fit
       */
      "object-fit": [{
        object: ["contain", "cover", "fill", "none", "scale-down"]
      }],
      /**
       * Object Position
       * @see https://tailwindcss.com/docs/object-position
       */
      "object-position": [{
        object: [...Oe(), C]
      }],
      /**
       * Overflow
       * @see https://tailwindcss.com/docs/overflow
       */
      overflow: [{
        overflow: Ce()
      }],
      /**
       * Overflow X
       * @see https://tailwindcss.com/docs/overflow
       */
      "overflow-x": [{
        "overflow-x": Ce()
      }],
      /**
       * Overflow Y
       * @see https://tailwindcss.com/docs/overflow
       */
      "overflow-y": [{
        "overflow-y": Ce()
      }],
      /**
       * Overscroll Behavior
       * @see https://tailwindcss.com/docs/overscroll-behavior
       */
      overscroll: [{
        overscroll: ve()
      }],
      /**
       * Overscroll Behavior X
       * @see https://tailwindcss.com/docs/overscroll-behavior
       */
      "overscroll-x": [{
        "overscroll-x": ve()
      }],
      /**
       * Overscroll Behavior Y
       * @see https://tailwindcss.com/docs/overscroll-behavior
       */
      "overscroll-y": [{
        "overscroll-y": ve()
      }],
      /**
       * Position
       * @see https://tailwindcss.com/docs/position
       */
      position: ["static", "fixed", "absolute", "relative", "sticky"],
      /**
       * Top / Right / Bottom / Left
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      inset: [{
        inset: [p]
      }],
      /**
       * Right / Left
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      "inset-x": [{
        "inset-x": [p]
      }],
      /**
       * Top / Bottom
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      "inset-y": [{
        "inset-y": [p]
      }],
      /**
       * Start
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      start: [{
        start: [p]
      }],
      /**
       * End
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      end: [{
        end: [p]
      }],
      /**
       * Top
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      top: [{
        top: [p]
      }],
      /**
       * Right
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      right: [{
        right: [p]
      }],
      /**
       * Bottom
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      bottom: [{
        bottom: [p]
      }],
      /**
       * Left
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      left: [{
        left: [p]
      }],
      /**
       * Visibility
       * @see https://tailwindcss.com/docs/visibility
       */
      visibility: ["visible", "invisible", "collapse"],
      /**
       * Z-Index
       * @see https://tailwindcss.com/docs/z-index
       */
      z: [{
        z: ["auto", Ee, C]
      }],
      // Flexbox and Grid
      /**
       * Flex Basis
       * @see https://tailwindcss.com/docs/flex-basis
       */
      basis: [{
        basis: Ie()
      }],
      /**
       * Flex Direction
       * @see https://tailwindcss.com/docs/flex-direction
       */
      "flex-direction": [{
        flex: ["row", "row-reverse", "col", "col-reverse"]
      }],
      /**
       * Flex Wrap
       * @see https://tailwindcss.com/docs/flex-wrap
       */
      "flex-wrap": [{
        flex: ["wrap", "wrap-reverse", "nowrap"]
      }],
      /**
       * Flex
       * @see https://tailwindcss.com/docs/flex
       */
      flex: [{
        flex: ["1", "auto", "initial", "none", C]
      }],
      /**
       * Flex Grow
       * @see https://tailwindcss.com/docs/flex-grow
       */
      grow: [{
        grow: K()
      }],
      /**
       * Flex Shrink
       * @see https://tailwindcss.com/docs/flex-shrink
       */
      shrink: [{
        shrink: K()
      }],
      /**
       * Order
       * @see https://tailwindcss.com/docs/order
       */
      order: [{
        order: ["first", "last", "none", Ee, C]
      }],
      /**
       * Grid Template Columns
       * @see https://tailwindcss.com/docs/grid-template-columns
       */
      "grid-cols": [{
        "grid-cols": [Pe]
      }],
      /**
       * Grid Column Start / End
       * @see https://tailwindcss.com/docs/grid-column
       */
      "col-start-end": [{
        col: ["auto", {
          span: ["full", Ee, C]
        }, C]
      }],
      /**
       * Grid Column Start
       * @see https://tailwindcss.com/docs/grid-column
       */
      "col-start": [{
        "col-start": ce()
      }],
      /**
       * Grid Column End
       * @see https://tailwindcss.com/docs/grid-column
       */
      "col-end": [{
        "col-end": ce()
      }],
      /**
       * Grid Template Rows
       * @see https://tailwindcss.com/docs/grid-template-rows
       */
      "grid-rows": [{
        "grid-rows": [Pe]
      }],
      /**
       * Grid Row Start / End
       * @see https://tailwindcss.com/docs/grid-row
       */
      "row-start-end": [{
        row: ["auto", {
          span: [Ee, C]
        }, C]
      }],
      /**
       * Grid Row Start
       * @see https://tailwindcss.com/docs/grid-row
       */
      "row-start": [{
        "row-start": ce()
      }],
      /**
       * Grid Row End
       * @see https://tailwindcss.com/docs/grid-row
       */
      "row-end": [{
        "row-end": ce()
      }],
      /**
       * Grid Auto Flow
       * @see https://tailwindcss.com/docs/grid-auto-flow
       */
      "grid-flow": [{
        "grid-flow": ["row", "col", "dense", "row-dense", "col-dense"]
      }],
      /**
       * Grid Auto Columns
       * @see https://tailwindcss.com/docs/grid-auto-columns
       */
      "auto-cols": [{
        "auto-cols": ["auto", "min", "max", "fr", C]
      }],
      /**
       * Grid Auto Rows
       * @see https://tailwindcss.com/docs/grid-auto-rows
       */
      "auto-rows": [{
        "auto-rows": ["auto", "min", "max", "fr", C]
      }],
      /**
       * Gap
       * @see https://tailwindcss.com/docs/gap
       */
      gap: [{
        gap: [f]
      }],
      /**
       * Gap X
       * @see https://tailwindcss.com/docs/gap
       */
      "gap-x": [{
        "gap-x": [f]
      }],
      /**
       * Gap Y
       * @see https://tailwindcss.com/docs/gap
       */
      "gap-y": [{
        "gap-y": [f]
      }],
      /**
       * Justify Content
       * @see https://tailwindcss.com/docs/justify-content
       */
      "justify-content": [{
        justify: ["normal", ...ke()]
      }],
      /**
       * Justify Items
       * @see https://tailwindcss.com/docs/justify-items
       */
      "justify-items": [{
        "justify-items": ["start", "end", "center", "stretch"]
      }],
      /**
       * Justify Self
       * @see https://tailwindcss.com/docs/justify-self
       */
      "justify-self": [{
        "justify-self": ["auto", "start", "end", "center", "stretch"]
      }],
      /**
       * Align Content
       * @see https://tailwindcss.com/docs/align-content
       */
      "align-content": [{
        content: ["normal", ...ke(), "baseline"]
      }],
      /**
       * Align Items
       * @see https://tailwindcss.com/docs/align-items
       */
      "align-items": [{
        items: ["start", "end", "center", "baseline", "stretch"]
      }],
      /**
       * Align Self
       * @see https://tailwindcss.com/docs/align-self
       */
      "align-self": [{
        self: ["auto", "start", "end", "center", "stretch", "baseline"]
      }],
      /**
       * Place Content
       * @see https://tailwindcss.com/docs/place-content
       */
      "place-content": [{
        "place-content": [...ke(), "baseline"]
      }],
      /**
       * Place Items
       * @see https://tailwindcss.com/docs/place-items
       */
      "place-items": [{
        "place-items": ["start", "end", "center", "baseline", "stretch"]
      }],
      /**
       * Place Self
       * @see https://tailwindcss.com/docs/place-self
       */
      "place-self": [{
        "place-self": ["auto", "start", "end", "center", "stretch"]
      }],
      // Spacing
      /**
       * Padding
       * @see https://tailwindcss.com/docs/padding
       */
      p: [{
        p: [v]
      }],
      /**
       * Padding X
       * @see https://tailwindcss.com/docs/padding
       */
      px: [{
        px: [v]
      }],
      /**
       * Padding Y
       * @see https://tailwindcss.com/docs/padding
       */
      py: [{
        py: [v]
      }],
      /**
       * Padding Start
       * @see https://tailwindcss.com/docs/padding
       */
      ps: [{
        ps: [v]
      }],
      /**
       * Padding End
       * @see https://tailwindcss.com/docs/padding
       */
      pe: [{
        pe: [v]
      }],
      /**
       * Padding Top
       * @see https://tailwindcss.com/docs/padding
       */
      pt: [{
        pt: [v]
      }],
      /**
       * Padding Right
       * @see https://tailwindcss.com/docs/padding
       */
      pr: [{
        pr: [v]
      }],
      /**
       * Padding Bottom
       * @see https://tailwindcss.com/docs/padding
       */
      pb: [{
        pb: [v]
      }],
      /**
       * Padding Left
       * @see https://tailwindcss.com/docs/padding
       */
      pl: [{
        pl: [v]
      }],
      /**
       * Margin
       * @see https://tailwindcss.com/docs/margin
       */
      m: [{
        m: [b]
      }],
      /**
       * Margin X
       * @see https://tailwindcss.com/docs/margin
       */
      mx: [{
        mx: [b]
      }],
      /**
       * Margin Y
       * @see https://tailwindcss.com/docs/margin
       */
      my: [{
        my: [b]
      }],
      /**
       * Margin Start
       * @see https://tailwindcss.com/docs/margin
       */
      ms: [{
        ms: [b]
      }],
      /**
       * Margin End
       * @see https://tailwindcss.com/docs/margin
       */
      me: [{
        me: [b]
      }],
      /**
       * Margin Top
       * @see https://tailwindcss.com/docs/margin
       */
      mt: [{
        mt: [b]
      }],
      /**
       * Margin Right
       * @see https://tailwindcss.com/docs/margin
       */
      mr: [{
        mr: [b]
      }],
      /**
       * Margin Bottom
       * @see https://tailwindcss.com/docs/margin
       */
      mb: [{
        mb: [b]
      }],
      /**
       * Margin Left
       * @see https://tailwindcss.com/docs/margin
       */
      ml: [{
        ml: [b]
      }],
      /**
       * Space Between X
       * @see https://tailwindcss.com/docs/space
       */
      "space-x": [{
        "space-x": [we]
      }],
      /**
       * Space Between X Reverse
       * @see https://tailwindcss.com/docs/space
       */
      "space-x-reverse": ["space-x-reverse"],
      /**
       * Space Between Y
       * @see https://tailwindcss.com/docs/space
       */
      "space-y": [{
        "space-y": [we]
      }],
      /**
       * Space Between Y Reverse
       * @see https://tailwindcss.com/docs/space
       */
      "space-y-reverse": ["space-y-reverse"],
      // Sizing
      /**
       * Width
       * @see https://tailwindcss.com/docs/width
       */
      w: [{
        w: ["auto", "min", "max", "fit", "svw", "lvw", "dvw", C, t]
      }],
      /**
       * Min-Width
       * @see https://tailwindcss.com/docs/min-width
       */
      "min-w": [{
        "min-w": [C, t, "min", "max", "fit"]
      }],
      /**
       * Max-Width
       * @see https://tailwindcss.com/docs/max-width
       */
      "max-w": [{
        "max-w": [C, t, "none", "full", "min", "max", "fit", "prose", {
          screen: [X]
        }, X]
      }],
      /**
       * Height
       * @see https://tailwindcss.com/docs/height
       */
      h: [{
        h: [C, t, "auto", "min", "max", "fit", "svh", "lvh", "dvh"]
      }],
      /**
       * Min-Height
       * @see https://tailwindcss.com/docs/min-height
       */
      "min-h": [{
        "min-h": [C, t, "min", "max", "fit", "svh", "lvh", "dvh"]
      }],
      /**
       * Max-Height
       * @see https://tailwindcss.com/docs/max-height
       */
      "max-h": [{
        "max-h": [C, t, "min", "max", "fit", "svh", "lvh", "dvh"]
      }],
      /**
       * Size
       * @see https://tailwindcss.com/docs/size
       */
      size: [{
        size: [C, t, "auto", "min", "max", "fit"]
      }],
      // Typography
      /**
       * Font Size
       * @see https://tailwindcss.com/docs/font-size
       */
      "font-size": [{
        text: ["base", X, Y]
      }],
      /**
       * Font Smoothing
       * @see https://tailwindcss.com/docs/font-smoothing
       */
      "font-smoothing": ["antialiased", "subpixel-antialiased"],
      /**
       * Font Style
       * @see https://tailwindcss.com/docs/font-style
       */
      "font-style": ["italic", "not-italic"],
      /**
       * Font Weight
       * @see https://tailwindcss.com/docs/font-weight
       */
      "font-weight": [{
        font: ["thin", "extralight", "light", "normal", "medium", "semibold", "bold", "extrabold", "black", Je]
      }],
      /**
       * Font Family
       * @see https://tailwindcss.com/docs/font-family
       */
      "font-family": [{
        font: [Pe]
      }],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-normal": ["normal-nums"],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-ordinal": ["ordinal"],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-slashed-zero": ["slashed-zero"],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-figure": ["lining-nums", "oldstyle-nums"],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-spacing": ["proportional-nums", "tabular-nums"],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-fraction": ["diagonal-fractions", "stacked-fractions"],
      /**
       * Letter Spacing
       * @see https://tailwindcss.com/docs/letter-spacing
       */
      tracking: [{
        tracking: ["tighter", "tight", "normal", "wide", "wider", "widest", C]
      }],
      /**
       * Line Clamp
       * @see https://tailwindcss.com/docs/line-clamp
       */
      "line-clamp": [{
        "line-clamp": ["none", he, Je]
      }],
      /**
       * Line Height
       * @see https://tailwindcss.com/docs/line-height
       */
      leading: [{
        leading: ["none", "tight", "snug", "normal", "relaxed", "loose", j, C]
      }],
      /**
       * List Style Image
       * @see https://tailwindcss.com/docs/list-style-image
       */
      "list-image": [{
        "list-image": ["none", C]
      }],
      /**
       * List Style Type
       * @see https://tailwindcss.com/docs/list-style-type
       */
      "list-style-type": [{
        list: ["none", "disc", "decimal", C]
      }],
      /**
       * List Style Position
       * @see https://tailwindcss.com/docs/list-style-position
       */
      "list-style-position": [{
        list: ["inside", "outside"]
      }],
      /**
       * Placeholder Color
       * @deprecated since Tailwind CSS v3.0.0
       * @see https://tailwindcss.com/docs/placeholder-color
       */
      "placeholder-color": [{
        placeholder: [e]
      }],
      /**
       * Placeholder Opacity
       * @see https://tailwindcss.com/docs/placeholder-opacity
       */
      "placeholder-opacity": [{
        "placeholder-opacity": [y]
      }],
      /**
       * Text Alignment
       * @see https://tailwindcss.com/docs/text-align
       */
      "text-alignment": [{
        text: ["left", "center", "right", "justify", "start", "end"]
      }],
      /**
       * Text Color
       * @see https://tailwindcss.com/docs/text-color
       */
      "text-color": [{
        text: [e]
      }],
      /**
       * Text Opacity
       * @see https://tailwindcss.com/docs/text-opacity
       */
      "text-opacity": [{
        "text-opacity": [y]
      }],
      /**
       * Text Decoration
       * @see https://tailwindcss.com/docs/text-decoration
       */
      "text-decoration": ["underline", "overline", "line-through", "no-underline"],
      /**
       * Text Decoration Style
       * @see https://tailwindcss.com/docs/text-decoration-style
       */
      "text-decoration-style": [{
        decoration: [...le(), "wavy"]
      }],
      /**
       * Text Decoration Thickness
       * @see https://tailwindcss.com/docs/text-decoration-thickness
       */
      "text-decoration-thickness": [{
        decoration: ["auto", "from-font", j, Y]
      }],
      /**
       * Text Underline Offset
       * @see https://tailwindcss.com/docs/text-underline-offset
       */
      "underline-offset": [{
        "underline-offset": ["auto", j, C]
      }],
      /**
       * Text Decoration Color
       * @see https://tailwindcss.com/docs/text-decoration-color
       */
      "text-decoration-color": [{
        decoration: [e]
      }],
      /**
       * Text Transform
       * @see https://tailwindcss.com/docs/text-transform
       */
      "text-transform": ["uppercase", "lowercase", "capitalize", "normal-case"],
      /**
       * Text Overflow
       * @see https://tailwindcss.com/docs/text-overflow
       */
      "text-overflow": ["truncate", "text-ellipsis", "text-clip"],
      /**
       * Text Wrap
       * @see https://tailwindcss.com/docs/text-wrap
       */
      "text-wrap": [{
        text: ["wrap", "nowrap", "balance", "pretty"]
      }],
      /**
       * Text Indent
       * @see https://tailwindcss.com/docs/text-indent
       */
      indent: [{
        indent: A()
      }],
      /**
       * Vertical Alignment
       * @see https://tailwindcss.com/docs/vertical-align
       */
      "vertical-align": [{
        align: ["baseline", "top", "middle", "bottom", "text-top", "text-bottom", "sub", "super", C]
      }],
      /**
       * Whitespace
       * @see https://tailwindcss.com/docs/whitespace
       */
      whitespace: [{
        whitespace: ["normal", "nowrap", "pre", "pre-line", "pre-wrap", "break-spaces"]
      }],
      /**
       * Word Break
       * @see https://tailwindcss.com/docs/word-break
       */
      break: [{
        break: ["normal", "words", "all", "keep"]
      }],
      /**
       * Hyphens
       * @see https://tailwindcss.com/docs/hyphens
       */
      hyphens: [{
        hyphens: ["none", "manual", "auto"]
      }],
      /**
       * Content
       * @see https://tailwindcss.com/docs/content
       */
      content: [{
        content: ["none", C]
      }],
      // Backgrounds
      /**
       * Background Attachment
       * @see https://tailwindcss.com/docs/background-attachment
       */
      "bg-attachment": [{
        bg: ["fixed", "local", "scroll"]
      }],
      /**
       * Background Clip
       * @see https://tailwindcss.com/docs/background-clip
       */
      "bg-clip": [{
        "bg-clip": ["border", "padding", "content", "text"]
      }],
      /**
       * Background Opacity
       * @deprecated since Tailwind CSS v3.0.0
       * @see https://tailwindcss.com/docs/background-opacity
       */
      "bg-opacity": [{
        "bg-opacity": [y]
      }],
      /**
       * Background Origin
       * @see https://tailwindcss.com/docs/background-origin
       */
      "bg-origin": [{
        "bg-origin": ["border", "padding", "content"]
      }],
      /**
       * Background Position
       * @see https://tailwindcss.com/docs/background-position
       */
      "bg-position": [{
        bg: [...Oe(), Cr]
      }],
      /**
       * Background Repeat
       * @see https://tailwindcss.com/docs/background-repeat
       */
      "bg-repeat": [{
        bg: ["no-repeat", {
          repeat: ["", "x", "y", "round", "space"]
        }]
      }],
      /**
       * Background Size
       * @see https://tailwindcss.com/docs/background-size
       */
      "bg-size": [{
        bg: ["auto", "cover", "contain", vr]
      }],
      /**
       * Background Image
       * @see https://tailwindcss.com/docs/background-image
       */
      "bg-image": [{
        bg: ["none", {
          "gradient-to": ["t", "tr", "r", "br", "b", "bl", "l", "tl"]
        }, kr]
      }],
      /**
       * Background Color
       * @see https://tailwindcss.com/docs/background-color
       */
      "bg-color": [{
        bg: [e]
      }],
      /**
       * Gradient Color Stops From Position
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-from-pos": [{
        from: [x]
      }],
      /**
       * Gradient Color Stops Via Position
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-via-pos": [{
        via: [x]
      }],
      /**
       * Gradient Color Stops To Position
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-to-pos": [{
        to: [x]
      }],
      /**
       * Gradient Color Stops From
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-from": [{
        from: [m]
      }],
      /**
       * Gradient Color Stops Via
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-via": [{
        via: [m]
      }],
      /**
       * Gradient Color Stops To
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-to": [{
        to: [m]
      }],
      // Borders
      /**
       * Border Radius
       * @see https://tailwindcss.com/docs/border-radius
       */
      rounded: [{
        rounded: [o]
      }],
      /**
       * Border Radius Start
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-s": [{
        "rounded-s": [o]
      }],
      /**
       * Border Radius End
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-e": [{
        "rounded-e": [o]
      }],
      /**
       * Border Radius Top
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-t": [{
        "rounded-t": [o]
      }],
      /**
       * Border Radius Right
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-r": [{
        "rounded-r": [o]
      }],
      /**
       * Border Radius Bottom
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-b": [{
        "rounded-b": [o]
      }],
      /**
       * Border Radius Left
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-l": [{
        "rounded-l": [o]
      }],
      /**
       * Border Radius Start Start
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-ss": [{
        "rounded-ss": [o]
      }],
      /**
       * Border Radius Start End
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-se": [{
        "rounded-se": [o]
      }],
      /**
       * Border Radius End End
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-ee": [{
        "rounded-ee": [o]
      }],
      /**
       * Border Radius End Start
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-es": [{
        "rounded-es": [o]
      }],
      /**
       * Border Radius Top Left
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-tl": [{
        "rounded-tl": [o]
      }],
      /**
       * Border Radius Top Right
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-tr": [{
        "rounded-tr": [o]
      }],
      /**
       * Border Radius Bottom Right
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-br": [{
        "rounded-br": [o]
      }],
      /**
       * Border Radius Bottom Left
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-bl": [{
        "rounded-bl": [o]
      }],
      /**
       * Border Width
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w": [{
        border: [a]
      }],
      /**
       * Border Width X
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-x": [{
        "border-x": [a]
      }],
      /**
       * Border Width Y
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-y": [{
        "border-y": [a]
      }],
      /**
       * Border Width Start
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-s": [{
        "border-s": [a]
      }],
      /**
       * Border Width End
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-e": [{
        "border-e": [a]
      }],
      /**
       * Border Width Top
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-t": [{
        "border-t": [a]
      }],
      /**
       * Border Width Right
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-r": [{
        "border-r": [a]
      }],
      /**
       * Border Width Bottom
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-b": [{
        "border-b": [a]
      }],
      /**
       * Border Width Left
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-l": [{
        "border-l": [a]
      }],
      /**
       * Border Opacity
       * @see https://tailwindcss.com/docs/border-opacity
       */
      "border-opacity": [{
        "border-opacity": [y]
      }],
      /**
       * Border Style
       * @see https://tailwindcss.com/docs/border-style
       */
      "border-style": [{
        border: [...le(), "hidden"]
      }],
      /**
       * Divide Width X
       * @see https://tailwindcss.com/docs/divide-width
       */
      "divide-x": [{
        "divide-x": [a]
      }],
      /**
       * Divide Width X Reverse
       * @see https://tailwindcss.com/docs/divide-width
       */
      "divide-x-reverse": ["divide-x-reverse"],
      /**
       * Divide Width Y
       * @see https://tailwindcss.com/docs/divide-width
       */
      "divide-y": [{
        "divide-y": [a]
      }],
      /**
       * Divide Width Y Reverse
       * @see https://tailwindcss.com/docs/divide-width
       */
      "divide-y-reverse": ["divide-y-reverse"],
      /**
       * Divide Opacity
       * @see https://tailwindcss.com/docs/divide-opacity
       */
      "divide-opacity": [{
        "divide-opacity": [y]
      }],
      /**
       * Divide Style
       * @see https://tailwindcss.com/docs/divide-style
       */
      "divide-style": [{
        divide: le()
      }],
      /**
       * Border Color
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color": [{
        border: [s]
      }],
      /**
       * Border Color X
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-x": [{
        "border-x": [s]
      }],
      /**
       * Border Color Y
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-y": [{
        "border-y": [s]
      }],
      /**
       * Border Color S
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-s": [{
        "border-s": [s]
      }],
      /**
       * Border Color E
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-e": [{
        "border-e": [s]
      }],
      /**
       * Border Color Top
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-t": [{
        "border-t": [s]
      }],
      /**
       * Border Color Right
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-r": [{
        "border-r": [s]
      }],
      /**
       * Border Color Bottom
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-b": [{
        "border-b": [s]
      }],
      /**
       * Border Color Left
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-l": [{
        "border-l": [s]
      }],
      /**
       * Divide Color
       * @see https://tailwindcss.com/docs/divide-color
       */
      "divide-color": [{
        divide: [s]
      }],
      /**
       * Outline Style
       * @see https://tailwindcss.com/docs/outline-style
       */
      "outline-style": [{
        outline: ["", ...le()]
      }],
      /**
       * Outline Offset
       * @see https://tailwindcss.com/docs/outline-offset
       */
      "outline-offset": [{
        "outline-offset": [j, C]
      }],
      /**
       * Outline Width
       * @see https://tailwindcss.com/docs/outline-width
       */
      "outline-w": [{
        outline: [j, Y]
      }],
      /**
       * Outline Color
       * @see https://tailwindcss.com/docs/outline-color
       */
      "outline-color": [{
        outline: [e]
      }],
      /**
       * Ring Width
       * @see https://tailwindcss.com/docs/ring-width
       */
      "ring-w": [{
        ring: ze()
      }],
      /**
       * Ring Width Inset
       * @see https://tailwindcss.com/docs/ring-width
       */
      "ring-w-inset": ["ring-inset"],
      /**
       * Ring Color
       * @see https://tailwindcss.com/docs/ring-color
       */
      "ring-color": [{
        ring: [e]
      }],
      /**
       * Ring Opacity
       * @see https://tailwindcss.com/docs/ring-opacity
       */
      "ring-opacity": [{
        "ring-opacity": [y]
      }],
      /**
       * Ring Offset Width
       * @see https://tailwindcss.com/docs/ring-offset-width
       */
      "ring-offset-w": [{
        "ring-offset": [j, Y]
      }],
      /**
       * Ring Offset Color
       * @see https://tailwindcss.com/docs/ring-offset-color
       */
      "ring-offset-color": [{
        "ring-offset": [e]
      }],
      // Effects
      /**
       * Box Shadow
       * @see https://tailwindcss.com/docs/box-shadow
       */
      shadow: [{
        shadow: ["", "inner", "none", X, Er]
      }],
      /**
       * Box Shadow Color
       * @see https://tailwindcss.com/docs/box-shadow-color
       */
      "shadow-color": [{
        shadow: [Pe]
      }],
      /**
       * Opacity
       * @see https://tailwindcss.com/docs/opacity
       */
      opacity: [{
        opacity: [y]
      }],
      /**
       * Mix Blend Mode
       * @see https://tailwindcss.com/docs/mix-blend-mode
       */
      "mix-blend": [{
        "mix-blend": [...Ue(), "plus-lighter", "plus-darker"]
      }],
      /**
       * Background Blend Mode
       * @see https://tailwindcss.com/docs/background-blend-mode
       */
      "bg-blend": [{
        "bg-blend": Ue()
      }],
      // Filters
      /**
       * Filter
       * @deprecated since Tailwind CSS v3.0.0
       * @see https://tailwindcss.com/docs/filter
       */
      filter: [{
        filter: ["", "none"]
      }],
      /**
       * Blur
       * @see https://tailwindcss.com/docs/blur
       */
      blur: [{
        blur: [n]
      }],
      /**
       * Brightness
       * @see https://tailwindcss.com/docs/brightness
       */
      brightness: [{
        brightness: [r]
      }],
      /**
       * Contrast
       * @see https://tailwindcss.com/docs/contrast
       */
      contrast: [{
        contrast: [l]
      }],
      /**
       * Drop Shadow
       * @see https://tailwindcss.com/docs/drop-shadow
       */
      "drop-shadow": [{
        "drop-shadow": ["", "none", X, C]
      }],
      /**
       * Grayscale
       * @see https://tailwindcss.com/docs/grayscale
       */
      grayscale: [{
        grayscale: [d]
      }],
      /**
       * Hue Rotate
       * @see https://tailwindcss.com/docs/hue-rotate
       */
      "hue-rotate": [{
        "hue-rotate": [h]
      }],
      /**
       * Invert
       * @see https://tailwindcss.com/docs/invert
       */
      invert: [{
        invert: [u]
      }],
      /**
       * Saturate
       * @see https://tailwindcss.com/docs/saturate
       */
      saturate: [{
        saturate: [N]
      }],
      /**
       * Sepia
       * @see https://tailwindcss.com/docs/sepia
       */
      sepia: [{
        sepia: [U]
      }],
      /**
       * Backdrop Filter
       * @deprecated since Tailwind CSS v3.0.0
       * @see https://tailwindcss.com/docs/backdrop-filter
       */
      "backdrop-filter": [{
        "backdrop-filter": ["", "none"]
      }],
      /**
       * Backdrop Blur
       * @see https://tailwindcss.com/docs/backdrop-blur
       */
      "backdrop-blur": [{
        "backdrop-blur": [n]
      }],
      /**
       * Backdrop Brightness
       * @see https://tailwindcss.com/docs/backdrop-brightness
       */
      "backdrop-brightness": [{
        "backdrop-brightness": [r]
      }],
      /**
       * Backdrop Contrast
       * @see https://tailwindcss.com/docs/backdrop-contrast
       */
      "backdrop-contrast": [{
        "backdrop-contrast": [l]
      }],
      /**
       * Backdrop Grayscale
       * @see https://tailwindcss.com/docs/backdrop-grayscale
       */
      "backdrop-grayscale": [{
        "backdrop-grayscale": [d]
      }],
      /**
       * Backdrop Hue Rotate
       * @see https://tailwindcss.com/docs/backdrop-hue-rotate
       */
      "backdrop-hue-rotate": [{
        "backdrop-hue-rotate": [h]
      }],
      /**
       * Backdrop Invert
       * @see https://tailwindcss.com/docs/backdrop-invert
       */
      "backdrop-invert": [{
        "backdrop-invert": [u]
      }],
      /**
       * Backdrop Opacity
       * @see https://tailwindcss.com/docs/backdrop-opacity
       */
      "backdrop-opacity": [{
        "backdrop-opacity": [y]
      }],
      /**
       * Backdrop Saturate
       * @see https://tailwindcss.com/docs/backdrop-saturate
       */
      "backdrop-saturate": [{
        "backdrop-saturate": [N]
      }],
      /**
       * Backdrop Sepia
       * @see https://tailwindcss.com/docs/backdrop-sepia
       */
      "backdrop-sepia": [{
        "backdrop-sepia": [U]
      }],
      // Tables
      /**
       * Border Collapse
       * @see https://tailwindcss.com/docs/border-collapse
       */
      "border-collapse": [{
        border: ["collapse", "separate"]
      }],
      /**
       * Border Spacing
       * @see https://tailwindcss.com/docs/border-spacing
       */
      "border-spacing": [{
        "border-spacing": [i]
      }],
      /**
       * Border Spacing X
       * @see https://tailwindcss.com/docs/border-spacing
       */
      "border-spacing-x": [{
        "border-spacing-x": [i]
      }],
      /**
       * Border Spacing Y
       * @see https://tailwindcss.com/docs/border-spacing
       */
      "border-spacing-y": [{
        "border-spacing-y": [i]
      }],
      /**
       * Table Layout
       * @see https://tailwindcss.com/docs/table-layout
       */
      "table-layout": [{
        table: ["auto", "fixed"]
      }],
      /**
       * Caption Side
       * @see https://tailwindcss.com/docs/caption-side
       */
      caption: [{
        caption: ["top", "bottom"]
      }],
      // Transitions and Animation
      /**
       * Tranisition Property
       * @see https://tailwindcss.com/docs/transition-property
       */
      transition: [{
        transition: ["none", "all", "", "colors", "opacity", "shadow", "transform", C]
      }],
      /**
       * Transition Duration
       * @see https://tailwindcss.com/docs/transition-duration
       */
      duration: [{
        duration: F()
      }],
      /**
       * Transition Timing Function
       * @see https://tailwindcss.com/docs/transition-timing-function
       */
      ease: [{
        ease: ["linear", "in", "out", "in-out", C]
      }],
      /**
       * Transition Delay
       * @see https://tailwindcss.com/docs/transition-delay
       */
      delay: [{
        delay: F()
      }],
      /**
       * Animation
       * @see https://tailwindcss.com/docs/animation
       */
      animate: [{
        animate: ["none", "spin", "ping", "pulse", "bounce", C]
      }],
      // Transforms
      /**
       * Transform
       * @see https://tailwindcss.com/docs/transform
       */
      transform: [{
        transform: ["", "gpu", "none"]
      }],
      /**
       * Scale
       * @see https://tailwindcss.com/docs/scale
       */
      scale: [{
        scale: [B]
      }],
      /**
       * Scale X
       * @see https://tailwindcss.com/docs/scale
       */
      "scale-x": [{
        "scale-x": [B]
      }],
      /**
       * Scale Y
       * @see https://tailwindcss.com/docs/scale
       */
      "scale-y": [{
        "scale-y": [B]
      }],
      /**
       * Rotate
       * @see https://tailwindcss.com/docs/rotate
       */
      rotate: [{
        rotate: [Ee, C]
      }],
      /**
       * Translate X
       * @see https://tailwindcss.com/docs/translate
       */
      "translate-x": [{
        "translate-x": [_e]
      }],
      /**
       * Translate Y
       * @see https://tailwindcss.com/docs/translate
       */
      "translate-y": [{
        "translate-y": [_e]
      }],
      /**
       * Skew X
       * @see https://tailwindcss.com/docs/skew
       */
      "skew-x": [{
        "skew-x": [M]
      }],
      /**
       * Skew Y
       * @see https://tailwindcss.com/docs/skew
       */
      "skew-y": [{
        "skew-y": [M]
      }],
      /**
       * Transform Origin
       * @see https://tailwindcss.com/docs/transform-origin
       */
      "transform-origin": [{
        origin: ["center", "top", "top-right", "right", "bottom-right", "bottom", "bottom-left", "left", "top-left", C]
      }],
      // Interactivity
      /**
       * Accent Color
       * @see https://tailwindcss.com/docs/accent-color
       */
      accent: [{
        accent: ["auto", e]
      }],
      /**
       * Appearance
       * @see https://tailwindcss.com/docs/appearance
       */
      appearance: [{
        appearance: ["none", "auto"]
      }],
      /**
       * Cursor
       * @see https://tailwindcss.com/docs/cursor
       */
      cursor: [{
        cursor: ["auto", "default", "pointer", "wait", "text", "move", "help", "not-allowed", "none", "context-menu", "progress", "cell", "crosshair", "vertical-text", "alias", "copy", "no-drop", "grab", "grabbing", "all-scroll", "col-resize", "row-resize", "n-resize", "e-resize", "s-resize", "w-resize", "ne-resize", "nw-resize", "se-resize", "sw-resize", "ew-resize", "ns-resize", "nesw-resize", "nwse-resize", "zoom-in", "zoom-out", C]
      }],
      /**
       * Caret Color
       * @see https://tailwindcss.com/docs/just-in-time-mode#caret-color-utilities
       */
      "caret-color": [{
        caret: [e]
      }],
      /**
       * Pointer Events
       * @see https://tailwindcss.com/docs/pointer-events
       */
      "pointer-events": [{
        "pointer-events": ["none", "auto"]
      }],
      /**
       * Resize
       * @see https://tailwindcss.com/docs/resize
       */
      resize: [{
        resize: ["none", "y", "x", ""]
      }],
      /**
       * Scroll Behavior
       * @see https://tailwindcss.com/docs/scroll-behavior
       */
      "scroll-behavior": [{
        scroll: ["auto", "smooth"]
      }],
      /**
       * Scroll Margin
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-m": [{
        "scroll-m": A()
      }],
      /**
       * Scroll Margin X
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-mx": [{
        "scroll-mx": A()
      }],
      /**
       * Scroll Margin Y
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-my": [{
        "scroll-my": A()
      }],
      /**
       * Scroll Margin Start
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-ms": [{
        "scroll-ms": A()
      }],
      /**
       * Scroll Margin End
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-me": [{
        "scroll-me": A()
      }],
      /**
       * Scroll Margin Top
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-mt": [{
        "scroll-mt": A()
      }],
      /**
       * Scroll Margin Right
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-mr": [{
        "scroll-mr": A()
      }],
      /**
       * Scroll Margin Bottom
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-mb": [{
        "scroll-mb": A()
      }],
      /**
       * Scroll Margin Left
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-ml": [{
        "scroll-ml": A()
      }],
      /**
       * Scroll Padding
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-p": [{
        "scroll-p": A()
      }],
      /**
       * Scroll Padding X
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-px": [{
        "scroll-px": A()
      }],
      /**
       * Scroll Padding Y
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-py": [{
        "scroll-py": A()
      }],
      /**
       * Scroll Padding Start
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-ps": [{
        "scroll-ps": A()
      }],
      /**
       * Scroll Padding End
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-pe": [{
        "scroll-pe": A()
      }],
      /**
       * Scroll Padding Top
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-pt": [{
        "scroll-pt": A()
      }],
      /**
       * Scroll Padding Right
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-pr": [{
        "scroll-pr": A()
      }],
      /**
       * Scroll Padding Bottom
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-pb": [{
        "scroll-pb": A()
      }],
      /**
       * Scroll Padding Left
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-pl": [{
        "scroll-pl": A()
      }],
      /**
       * Scroll Snap Align
       * @see https://tailwindcss.com/docs/scroll-snap-align
       */
      "snap-align": [{
        snap: ["start", "end", "center", "align-none"]
      }],
      /**
       * Scroll Snap Stop
       * @see https://tailwindcss.com/docs/scroll-snap-stop
       */
      "snap-stop": [{
        snap: ["normal", "always"]
      }],
      /**
       * Scroll Snap Type
       * @see https://tailwindcss.com/docs/scroll-snap-type
       */
      "snap-type": [{
        snap: ["none", "x", "y", "both"]
      }],
      /**
       * Scroll Snap Type Strictness
       * @see https://tailwindcss.com/docs/scroll-snap-type
       */
      "snap-strictness": [{
        snap: ["mandatory", "proximity"]
      }],
      /**
       * Touch Action
       * @see https://tailwindcss.com/docs/touch-action
       */
      touch: [{
        touch: ["auto", "none", "manipulation"]
      }],
      /**
       * Touch Action X
       * @see https://tailwindcss.com/docs/touch-action
       */
      "touch-x": [{
        "touch-pan": ["x", "left", "right"]
      }],
      /**
       * Touch Action Y
       * @see https://tailwindcss.com/docs/touch-action
       */
      "touch-y": [{
        "touch-pan": ["y", "up", "down"]
      }],
      /**
       * Touch Action Pinch Zoom
       * @see https://tailwindcss.com/docs/touch-action
       */
      "touch-pz": ["touch-pinch-zoom"],
      /**
       * User Select
       * @see https://tailwindcss.com/docs/user-select
       */
      select: [{
        select: ["none", "text", "all", "auto"]
      }],
      /**
       * Will Change
       * @see https://tailwindcss.com/docs/will-change
       */
      "will-change": [{
        "will-change": ["auto", "scroll", "contents", "transform", C]
      }],
      // SVG
      /**
       * Fill
       * @see https://tailwindcss.com/docs/fill
       */
      fill: [{
        fill: [e, "none"]
      }],
      /**
       * Stroke Width
       * @see https://tailwindcss.com/docs/stroke-width
       */
      "stroke-w": [{
        stroke: [j, Y, Je]
      }],
      /**
       * Stroke
       * @see https://tailwindcss.com/docs/stroke
       */
      stroke: [{
        stroke: [e, "none"]
      }],
      // Accessibility
      /**
       * Screen Readers
       * @see https://tailwindcss.com/docs/screen-readers
       */
      sr: ["sr-only", "not-sr-only"],
      /**
       * Forced Color Adjust
       * @see https://tailwindcss.com/docs/forced-color-adjust
       */
      "forced-color-adjust": [{
        "forced-color-adjust": ["auto", "none"]
      }]
    },
    conflictingClassGroups: {
      overflow: ["overflow-x", "overflow-y"],
      overscroll: ["overscroll-x", "overscroll-y"],
      inset: ["inset-x", "inset-y", "start", "end", "top", "right", "bottom", "left"],
      "inset-x": ["right", "left"],
      "inset-y": ["top", "bottom"],
      flex: ["basis", "grow", "shrink"],
      gap: ["gap-x", "gap-y"],
      p: ["px", "py", "ps", "pe", "pt", "pr", "pb", "pl"],
      px: ["pr", "pl"],
      py: ["pt", "pb"],
      m: ["mx", "my", "ms", "me", "mt", "mr", "mb", "ml"],
      mx: ["mr", "ml"],
      my: ["mt", "mb"],
      size: ["w", "h"],
      "font-size": ["leading"],
      "fvn-normal": ["fvn-ordinal", "fvn-slashed-zero", "fvn-figure", "fvn-spacing", "fvn-fraction"],
      "fvn-ordinal": ["fvn-normal"],
      "fvn-slashed-zero": ["fvn-normal"],
      "fvn-figure": ["fvn-normal"],
      "fvn-spacing": ["fvn-normal"],
      "fvn-fraction": ["fvn-normal"],
      "line-clamp": ["display", "overflow"],
      rounded: ["rounded-s", "rounded-e", "rounded-t", "rounded-r", "rounded-b", "rounded-l", "rounded-ss", "rounded-se", "rounded-ee", "rounded-es", "rounded-tl", "rounded-tr", "rounded-br", "rounded-bl"],
      "rounded-s": ["rounded-ss", "rounded-es"],
      "rounded-e": ["rounded-se", "rounded-ee"],
      "rounded-t": ["rounded-tl", "rounded-tr"],
      "rounded-r": ["rounded-tr", "rounded-br"],
      "rounded-b": ["rounded-br", "rounded-bl"],
      "rounded-l": ["rounded-tl", "rounded-bl"],
      "border-spacing": ["border-spacing-x", "border-spacing-y"],
      "border-w": ["border-w-s", "border-w-e", "border-w-t", "border-w-r", "border-w-b", "border-w-l"],
      "border-w-x": ["border-w-r", "border-w-l"],
      "border-w-y": ["border-w-t", "border-w-b"],
      "border-color": ["border-color-s", "border-color-e", "border-color-t", "border-color-r", "border-color-b", "border-color-l"],
      "border-color-x": ["border-color-r", "border-color-l"],
      "border-color-y": ["border-color-t", "border-color-b"],
      "scroll-m": ["scroll-mx", "scroll-my", "scroll-ms", "scroll-me", "scroll-mt", "scroll-mr", "scroll-mb", "scroll-ml"],
      "scroll-mx": ["scroll-mr", "scroll-ml"],
      "scroll-my": ["scroll-mt", "scroll-mb"],
      "scroll-p": ["scroll-px", "scroll-py", "scroll-ps", "scroll-pe", "scroll-pt", "scroll-pr", "scroll-pb", "scroll-pl"],
      "scroll-px": ["scroll-pr", "scroll-pl"],
      "scroll-py": ["scroll-pt", "scroll-pb"],
      touch: ["touch-x", "touch-y", "touch-pz"],
      "touch-x": ["touch"],
      "touch-y": ["touch"],
      "touch-pz": ["touch"]
    },
    conflictingClassGroupModifiers: {
      "font-size": ["leading"]
    }
  };
}, Sr = /* @__PURE__ */ ur(Tr);
function g(...e) {
  return Sr(Zt(e));
}
const Lr = (e, t = 6) => `${e.slice(0, t)}...${e.slice(-t)}`, Ze = S.forwardRef(({ className: e, ...t }, n) => /* @__PURE__ */ c(
  "div",
  {
    ref: n,
    className: g("rounded-xl border bg-black text-white shadow", e),
    ...t
  }
));
Ze.displayName = "Card";
const Qe = S.forwardRef(({ className: e, ...t }, n) => /* @__PURE__ */ c(
  "div",
  {
    ref: n,
    className: g("flex flex-col space-y-1.5 p-6", e),
    ...t
  }
));
Qe.displayName = "CardHeader";
const et = S.forwardRef(({ className: e, ...t }, n) => /* @__PURE__ */ c(
  "h3",
  {
    ref: n,
    className: g("font-semibold leading-none tracking-tight", e),
    ...t
  }
));
et.displayName = "CardTitle";
const Rr = S.forwardRef(({ className: e, ...t }, n) => /* @__PURE__ */ c(
  "p",
  {
    ref: n,
    className: g("text-sm text-muted-foreground", e),
    ...t
  }
));
Rr.displayName = "CardDescription";
const tt = S.forwardRef(({ className: e, ...t }, n) => /* @__PURE__ */ c("div", { ref: n, className: g("p-6 pt-0", e), ...t }));
tt.displayName = "CardContent";
const sn = S.forwardRef(({ className: e, ...t }, n) => /* @__PURE__ */ c(
  "div",
  {
    ref: n,
    className: g("flex items-center p-6 pt-0", e),
    ...t
  }
));
sn.displayName = "CardFooter";
function kt(e, t) {
  if (typeof e == "function")
    return e(t);
  e != null && (e.current = t);
}
function Br(...e) {
  return (t) => {
    let n = !1;
    const r = e.map((s) => {
      const o = kt(s, t);
      return !n && typeof o == "function" && (n = !0), o;
    });
    if (n)
      return () => {
        for (let s = 0; s < r.length; s++) {
          const o = r[s];
          typeof o == "function" ? o() : kt(e[s], null);
        }
      };
  };
}
var lt = S.forwardRef((e, t) => {
  const { children: n, ...r } = e, s = S.Children.toArray(n), o = s.find(zr);
  if (o) {
    const i = o.props.children, a = s.map((l) => l === o ? S.Children.count(i) > 1 ? S.Children.only(null) : S.isValidElement(i) ? i.props.children : null : l);
    return /* @__PURE__ */ c(nt, { ...r, ref: t, children: S.isValidElement(i) ? S.cloneElement(i, void 0, a) : null });
  }
  return /* @__PURE__ */ c(nt, { ...r, ref: t, children: n });
});
lt.displayName = "Slot";
var nt = S.forwardRef((e, t) => {
  const { children: n, ...r } = e;
  if (S.isValidElement(n)) {
    const s = Ur(n);
    return S.cloneElement(n, {
      ...Or(r, n.props),
      // @ts-ignore
      ref: t ? Br(t, s) : s
    });
  }
  return S.Children.count(n) > 1 ? S.Children.only(null) : null;
});
nt.displayName = "SlotClone";
var _r = ({ children: e }) => /* @__PURE__ */ c(J, { children: e });
function zr(e) {
  return S.isValidElement(e) && e.type === _r;
}
function Or(e, t) {
  const n = { ...t };
  for (const r in t) {
    const s = e[r], o = t[r];
    /^on[A-Z]/.test(r) ? s && o ? n[r] = (...a) => {
      o(...a), s(...a);
    } : s && (n[r] = s) : r === "style" ? n[r] = { ...s, ...o } : r === "className" && (n[r] = [s, o].filter(Boolean).join(" "));
  }
  return { ...e, ...n };
}
function Ur(e) {
  var r, s;
  let t = (r = Object.getOwnPropertyDescriptor(e.props, "ref")) == null ? void 0 : r.get, n = t && "isReactWarning" in t && t.isReactWarning;
  return n ? e.ref : (t = (s = Object.getOwnPropertyDescriptor(e, "ref")) == null ? void 0 : s.get, n = t && "isReactWarning" in t && t.isReactWarning, n ? e.props.ref : e.props.ref || e.ref);
}
const Et = (e) => typeof e == "boolean" ? `${e}` : e === 0 ? "0" : e, Pt = Zt, Gr = (e, t) => (n) => {
  var r;
  if ((t == null ? void 0 : t.variants) == null) return Pt(e, n == null ? void 0 : n.class, n == null ? void 0 : n.className);
  const { variants: s, defaultVariants: o } = t, i = Object.keys(s).map((d) => {
    const h = n == null ? void 0 : n[d], u = o == null ? void 0 : o[d];
    if (h === null) return null;
    const f = Et(h) || Et(u);
    return s[d][f];
  }), a = n && Object.entries(n).reduce((d, h) => {
    let [u, f] = h;
    return f === void 0 || (d[u] = f), d;
  }, {}), l = t == null || (r = t.compoundVariants) === null || r === void 0 ? void 0 : r.reduce((d, h) => {
    let { class: u, className: f, ...m } = h;
    return Object.entries(m).every((x) => {
      let [p, b] = x;
      return Array.isArray(b) ? b.includes({
        ...o,
        ...a
      }[p]) : {
        ...o,
        ...a
      }[p] === b;
    }) ? [
      ...d,
      u,
      f
    ] : d;
  }, []);
  return Pt(e, i, l, n == null ? void 0 : n.class, n == null ? void 0 : n.className);
}, dt = Gr(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground shadow hover:bg-primary/90",
        destructive: "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
        outline: "border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",
        secondary: "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline"
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 rounded-md px-8",
        icon: "h-9 w-9"
      }
    },
    defaultVariants: {
      variant: "default",
      size: "default"
    }
  }
), z = S.forwardRef(
  ({ className: e, variant: t, size: n, asChild: r = !1, ...s }, o) => /* @__PURE__ */ c(
    r ? lt : "button",
    {
      className: g(dt({ variant: t, size: n, className: e })),
      ref: o,
      ...s
    }
  )
);
z.displayName = "Button";
var Fr = /* @__PURE__ */ ((e) => (e[e.ADMIN = 0] = "ADMIN", e[e.USER = 1] = "USER", e))(Fr || {}), te = /* @__PURE__ */ ((e) => (e.APPLE = "APPLE", e.EMAIL = "EMAIL", e.GOOGLE = "GOOGLE", e.FACEBOOK = "FACEBOOK", e))(te || {}), $r = [
  "a",
  "button",
  "div",
  "form",
  "h2",
  "h3",
  "img",
  "input",
  "label",
  "li",
  "nav",
  "ol",
  "p",
  "span",
  "svg",
  "ul"
], Mr = $r.reduce((e, t) => {
  const n = S.forwardRef((r, s) => {
    const { asChild: o, ...i } = r, a = o ? lt : t;
    return typeof window < "u" && (window[Symbol.for("radix-ui")] = !0), /* @__PURE__ */ c(a, { ...i, ref: s });
  });
  return n.displayName = `Primitive.${t}`, { ...e, [t]: n };
}, {}), Wr = "Separator", Nt = "horizontal", Hr = ["horizontal", "vertical"], on = S.forwardRef((e, t) => {
  const { decorative: n, orientation: r = Nt, ...s } = e, o = Vr(r) ? r : Nt, a = n ? { role: "none" } : { "aria-orientation": o === "vertical" ? o : void 0, role: "separator" };
  return /* @__PURE__ */ c(
    Mr.div,
    {
      "data-orientation": o,
      ...a,
      ...s,
      ref: t
    }
  );
});
on.displayName = Wr;
function Vr(e) {
  return Hr.includes(e);
}
var an = on;
const rt = S.forwardRef(
  ({ className: e, orientation: t = "horizontal", decorative: n = !0, ...r }, s) => /* @__PURE__ */ c(
    an,
    {
      ref: s,
      decorative: n,
      orientation: t,
      className: g(
        "shrink-0 bg-border",
        t === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        e
      ),
      ...r
    }
  )
);
rt.displayName = an.displayName;
const cn = $n(void 0), be = () => {
  const e = Mn(cn);
  if (e === void 0)
    throw new Error(
      "useBedrockUser must be used within a Bedrock Passport Provider"
    );
  return e;
}, ue = {
  facebook: (e) => /* @__PURE__ */ k("svg", { ...e, xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 1024 1024", children: [
    /* @__PURE__ */ c(
      "path",
      {
        fill: "#1877f2",
        d: "M1024,512C1024,229.23016,794.76978,0,512,0S0,229.23016,0,512c0,255.554,187.231,467.37012,432,505.77777V660H302V512H432V399.2C432,270.87982,508.43854,200,625.38922,200,681.40765,200,740,210,740,210V336H675.43713C611.83508,336,592,375.46667,592,415.95728V512H734L711.3,660H592v357.77777C836.769,979.37012,1024,767.554,1024,512Z"
      }
    ),
    /* @__PURE__ */ c(
      "path",
      {
        fill: "#fff",
        d: "M711.3,660,734,512H592V415.95728C592,375.46667,611.83508,336,675.43713,336H740V210s-58.59235-10-114.61078-10C508.43854,200,432,270.87982,432,399.2V512H302V660H432v357.77777a517.39619,517.39619,0,0,0,160,0V660Z"
      }
    )
  ] }),
  google: (e) => /* @__PURE__ */ c(
    "svg",
    {
      ...e,
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 186.69 190.5",
      children: /* @__PURE__ */ k("g", { transform: "translate(1184.583 765.171)", children: [
        /* @__PURE__ */ c(
          "path",
          {
            clipPath: "none",
            mask: "none",
            d: "M-1089.333-687.239v36.888h51.262c-2.251 11.863-9.006 21.908-19.137 28.662l30.913 23.986c18.011-16.625 28.402-41.044 28.402-70.052 0-6.754-.606-13.249-1.732-19.483z",
            fill: "#4285f4"
          }
        ),
        /* @__PURE__ */ c(
          "path",
          {
            clipPath: "none",
            mask: "none",
            d: "M-1142.714-651.791l-6.972 5.337-24.679 19.223h0c15.673 31.086 47.796 52.561 85.03 52.561 25.717 0 47.278-8.486 63.038-23.033l-30.913-23.986c-8.486 5.715-19.31 9.179-32.125 9.179-24.765 0-45.806-16.712-53.34-39.226z",
            fill: "#34a853"
          }
        ),
        /* @__PURE__ */ c(
          "path",
          {
            clipPath: "none",
            mask: "none",
            d: "M-1174.365-712.61c-6.494 12.815-10.217 27.276-10.217 42.689s3.723 29.874 10.217 42.689c0 .086 31.693-24.592 31.693-24.592-1.905-5.715-3.031-11.776-3.031-18.098s1.126-12.383 3.031-18.098z",
            fill: "#fbbc05"
          }
        ),
        /* @__PURE__ */ c(
          "path",
          {
            d: "M-1089.333-727.244c14.028 0 26.497 4.849 36.455 14.201l27.276-27.276c-16.539-15.413-38.013-24.852-63.731-24.852-37.234 0-69.359 21.388-85.032 52.561l31.692 24.592c7.533-22.514 28.575-39.226 53.34-39.226z",
            fill: "#ea4335",
            clipPath: "none",
            mask: "none"
          }
        )
      ] })
    }
  ),
  apple: (e) => /* @__PURE__ */ c(
    "svg",
    {
      ...e,
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 496.255 608.728",
      children: /* @__PURE__ */ c(
        "path",
        {
          fill: "#999",
          d: "M273.81 52.973C313.806.257 369.41 0 369.41 0s8.271 49.562-31.463 97.306c-42.426 50.98-90.649 42.638-90.649 42.638s-9.055-40.094 26.512-86.971zM252.385 174.662c20.576 0 58.764-28.284 108.471-28.284 85.562 0 119.222 60.883 119.222 60.883s-65.833 33.659-65.833 115.331c0 92.133 82.01 123.885 82.01 123.885s-57.328 161.357-134.762 161.357c-35.565 0-63.215-23.967-100.688-23.967-38.188 0-76.084 24.861-100.766 24.861C89.33 608.73 0 455.666 0 332.628c0-121.052 75.612-184.554 146.533-184.554 46.105 0 81.883 26.588 105.852 26.588z"
        }
      )
    }
  ),
  wallet: (e) => /* @__PURE__ */ k("svg", { ...e, viewBox: "0 0 24 24", xmlns: "http://www.w3.org/2000/svg", children: [
    /* @__PURE__ */ c(
      "path",
      {
        d: "M19 7V4C19 3.73478 18.8946 3.48043 18.7071 3.29289C18.5196 3.10536 18.2652 3 18 3H5C4.46957 3 3.96086 3.21071 3.58579 3.58579C3.21071 3.96086 3 4.46957 3 5C3 5.53043 3.21071 6.03914 3.58579 6.41421C3.96086 6.78929 4.46957 7 5 7H20C20.2652 7 20.5196 7.10536 20.7071 7.29289C20.8946 7.48043 21 7.73478 21 8V12M21 12H18C17.4696 12 16.9609 12.2107 16.5858 12.5858C16.2107 12.9609 16 13.4696 16 14C16 14.5304 16.2107 15.0391 16.5858 15.4142C16.9609 15.7893 17.4696 16 18 16H21C21.2652 16 21.5196 15.8946 21.7071 15.7071C21.8946 15.5196 22 15.2652 22 15V13C22 12.7348 21.8946 12.4804 21.7071 12.2929C21.5196 12.1054 21.2652 12 21 12Z",
        stroke: "currentColor",
        strokeWidth: "1.5",
        strokeLinecap: "round",
        strokeLinejoin: "round"
      }
    ),
    /* @__PURE__ */ c(
      "path",
      {
        d: "M3 5V19C3 19.5304 3.21071 20.0391 3.58579 20.4142C3.96086 20.7893 4.46957 21 5 21H20C20.2652 21 20.5196 20.8946 20.7071 20.7071C20.8946 20.5196 21 20.2652 21 20V16",
        stroke: "currentColor",
        strokeWidth: "1.5",
        strokeLinecap: "round",
        strokeLinejoin: "round"
      }
    )
  ] }),
  email: (e) => /* @__PURE__ */ k(
    "svg",
    {
      ...e,
      viewBox: "0 0 24 24",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      children: [
        /* @__PURE__ */ c("g", { id: "SVGRepo_bgCarrier", strokeWidth: "0" }),
        /* @__PURE__ */ c(
          "g",
          {
            id: "SVGRepo_tracerCarrier",
            strokeLinecap: "round",
            strokeLinejoin: "round"
          }
        ),
        /* @__PURE__ */ c("g", { id: "SVGRepo_iconCarrier", children: /* @__PURE__ */ c(
          "path",
          {
            d: "M4 7L10.94 11.3375C11.5885 11.7428 12.4115 11.7428 13.06 11.3375L20 7M5 18H19C20.1046 18 21 17.1046 21 16V8C21 6.89543 20.1046 6 19 6H5C3.89543 6 3 6.89543 3 8V16C3 17.1046 3.89543 18 5 18Z",
            stroke: "currentColor",
            strokeWidth: "2",
            strokeLinecap: "round",
            strokeLinejoin: "round"
          }
        ) })
      ]
    }
  )
}, jr = G.Root, Dr = G.Portal, ln = me.forwardRef(({ className: e, ...t }, n) => /* @__PURE__ */ c(
  G.Overlay,
  {
    className: g(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      e
    ),
    ...t,
    ref: n
  }
));
ln.displayName = G.Overlay.displayName;
const dn = me.forwardRef(({ className: e, ...t }, n) => /* @__PURE__ */ k(Dr, { children: [
  /* @__PURE__ */ c(ln, {}),
  /* @__PURE__ */ c(
    G.Content,
    {
      ref: n,
      className: g(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-xs sm:max-w-sm translate-x-[-50%] translate-y-[-50%] gap-4 bg-[#2b2b2b] p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg text-[#dadada] rounded-lg",
        e
      ),
      ...t
    }
  )
] }));
dn.displayName = G.Content.displayName;
const un = ({
  className: e,
  ...t
}) => /* @__PURE__ */ c(
  "div",
  {
    className: g("flex flex-col space-y-2 text-center", e),
    ...t
  }
);
un.displayName = "AlertDialogHeader";
const fn = me.forwardRef(({ className: e, ...t }, n) => /* @__PURE__ */ c(
  G.Title,
  {
    ref: n,
    className: g("text-lg font-semibold", e),
    ...t
  }
));
fn.displayName = G.Title.displayName;
const st = me.forwardRef(({ className: e, ...t }, n) => /* @__PURE__ */ c(
  G.Description,
  {
    ref: n,
    className: g("text-[#808080]", e),
    ...t
  }
));
st.displayName = G.Description.displayName;
const Jr = me.forwardRef(({ className: e, ...t }, n) => /* @__PURE__ */ c(
  G.Action,
  {
    ref: n,
    className: g(dt(), e),
    ...t
  }
));
Jr.displayName = G.Action.displayName;
const Kr = me.forwardRef(({ className: e, ...t }, n) => /* @__PURE__ */ c(
  G.Cancel,
  {
    ref: n,
    className: g(
      dt({ variant: "outline" }),
      "mt-2 sm:mt-0",
      e
    ),
    ...t
  }
));
Kr.displayName = G.Cancel.displayName;
const qr = () => /* @__PURE__ */ k(
  "svg",
  {
    className: "h-8 w-8 animate-spin stroke-[#dadada]",
    viewBox: "0 0 256 256",
    children: [
      /* @__PURE__ */ c(
        "line",
        {
          x1: "128",
          y1: "32",
          x2: "128",
          y2: "64",
          strokeLinecap: "round",
          strokeLinejoin: "round",
          strokeWidth: "24"
        }
      ),
      /* @__PURE__ */ c(
        "line",
        {
          x1: "195.9",
          y1: "60.1",
          x2: "173.3",
          y2: "82.7",
          strokeLinecap: "round",
          strokeLinejoin: "round",
          strokeWidth: "24"
        }
      ),
      /* @__PURE__ */ c(
        "line",
        {
          x1: "224",
          y1: "128",
          x2: "192",
          y2: "128",
          strokeLinecap: "round",
          strokeLinejoin: "round",
          strokeWidth: "24"
        }
      ),
      /* @__PURE__ */ c(
        "line",
        {
          x1: "195.9",
          y1: "195.9",
          x2: "173.3",
          y2: "173.3",
          strokeLinecap: "round",
          strokeLinejoin: "round",
          strokeWidth: "24"
        }
      ),
      /* @__PURE__ */ c(
        "line",
        {
          x1: "128",
          y1: "224",
          x2: "128",
          y2: "192",
          strokeLinecap: "round",
          strokeLinejoin: "round",
          strokeWidth: "24"
        }
      ),
      /* @__PURE__ */ c(
        "line",
        {
          x1: "60.1",
          y1: "195.9",
          x2: "82.7",
          y2: "173.3",
          strokeLinecap: "round",
          strokeLinejoin: "round",
          strokeWidth: "24"
        }
      ),
      /* @__PURE__ */ c(
        "line",
        {
          x1: "32",
          y1: "128",
          x2: "64",
          y2: "128",
          strokeLinecap: "round",
          strokeLinejoin: "round",
          strokeWidth: "24"
        }
      ),
      /* @__PURE__ */ c(
        "line",
        {
          x1: "60.1",
          y1: "60.1",
          x2: "82.7",
          y2: "82.7",
          strokeLinecap: "round",
          strokeLinejoin: "round",
          strokeWidth: "24"
        }
      )
    ]
  }
), Yr = (e) => /* @__PURE__ */ c(jr, { open: e.open, children: /* @__PURE__ */ c(dn, { children: /* @__PURE__ */ k(un, { children: [
  /* @__PURE__ */ c(fn, { children: "Sign in with Wallet" }),
  /* @__PURE__ */ c(st, { children: "This app would like to verify you as the owner of this wallet." }),
  /* @__PURE__ */ c(
    "div",
    {
      "aria-label": "Loading...",
      role: "status",
      className: "flex items-center space-x-2 justify-center",
      children: /* @__PURE__ */ k("div", { className: "relative z-10 flex w-full cursor-pointer items-center overflow-hidden rounded-xl p-1", children: [
        /* @__PURE__ */ c("div", { className: "animate-rotate absolute inset-0 h-full w-full rounded-full bg-[conic-gradient(#2b8bee_20deg,transparent_120deg)]" }),
        /* @__PURE__ */ k("div", { className: "relative z-20 flex w-full rounded-[0.60rem] bg-[#2b2b2b] p-4 justify-center items-center gap-4", children: [
          /* @__PURE__ */ c(qr, {}),
          /* @__PURE__ */ c("span", { className: "text-sm sm:text-lg font-medium text[#808080]", children: "Awaiting Confirmation" })
        ] })
      ] })
    }
  ),
  /* @__PURE__ */ c(st, { children: "Please sign the message request in your wallet to continue." })
] }) }) }), hn = "2.26.3";
let Ne = {
  getDocsUrl: ({ docsBaseUrl: e, docsPath: t = "", docsSlug: n }) => t ? `${e ?? "https://viem.sh"}${t}${n ? `#${n}` : ""}` : void 0,
  version: `viem@${hn}`
};
class L extends Error {
  constructor(t, n = {}) {
    var a;
    const r = (() => {
      var l;
      return n.cause instanceof L ? n.cause.details : (l = n.cause) != null && l.message ? n.cause.message : n.details;
    })(), s = n.cause instanceof L && n.cause.docsPath || n.docsPath, o = (a = Ne.getDocsUrl) == null ? void 0 : a.call(Ne, { ...n, docsPath: s }), i = [
      t || "An error occurred.",
      "",
      ...n.metaMessages ? [...n.metaMessages, ""] : [],
      ...o ? [`Docs: ${o}`] : [],
      ...r ? [`Details: ${r}`] : [],
      ...Ne.version ? [`Version: ${Ne.version}`] : []
    ].join(`
`);
    super(i, n.cause ? { cause: n.cause } : void 0), Object.defineProperty(this, "details", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "docsPath", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "metaMessages", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "shortMessage", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "version", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "name", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: "BaseError"
    }), this.details = r, this.docsPath = s, this.metaMessages = n.metaMessages, this.name = n.name ?? this.name, this.shortMessage = t, this.version = hn;
  }
  walk(t) {
    return pn(this, t);
  }
}
function pn(e, t) {
  return t != null && t(e) ? e : e && typeof e == "object" && "cause" in e && e.cause !== void 0 ? pn(e.cause, t) : t ? null : e;
}
class Xr extends L {
  constructor({ max: t, min: n, signed: r, size: s, value: o }) {
    super(`Number "${o}" is not in safe ${s ? `${s * 8}-bit ${r ? "signed" : "unsigned"} ` : ""}integer range ${t ? `(${n} to ${t})` : `(above ${n})`}`, { name: "IntegerOutOfRangeError" });
  }
}
class Zr extends L {
  constructor({ givenSize: t, maxSize: n }) {
    super(`Size cannot exceed ${n} bytes. Given size: ${t} bytes.`, { name: "SizeOverflowError" });
  }
}
class Qr extends L {
  constructor({ offset: t, position: n, size: r }) {
    super(`Slice ${n === "start" ? "starting" : "ending"} at offset "${t}" is out-of-bounds (size: ${r}).`, { name: "SliceOffsetOutOfBoundsError" });
  }
}
class mn extends L {
  constructor({ size: t, targetSize: n, type: r }) {
    super(`${r.charAt(0).toUpperCase()}${r.slice(1).toLowerCase()} size (${t}) exceeds padding size (${n}).`, { name: "SizeExceedsPaddingSizeError" });
  }
}
function ye(e, { dir: t, size: n = 32 } = {}) {
  return typeof e == "string" ? es(e, { dir: t, size: n }) : ts(e, { dir: t, size: n });
}
function es(e, { dir: t, size: n = 32 } = {}) {
  if (n === null)
    return e;
  const r = e.replace("0x", "");
  if (r.length > n * 2)
    throw new mn({
      size: Math.ceil(r.length / 2),
      targetSize: n,
      type: "hex"
    });
  return `0x${r[t === "right" ? "padEnd" : "padStart"](n * 2, "0")}`;
}
function ts(e, { dir: t, size: n = 32 } = {}) {
  if (n === null)
    return e;
  if (e.length > n)
    throw new mn({
      size: e.length,
      targetSize: n,
      type: "bytes"
    });
  const r = new Uint8Array(n);
  for (let s = 0; s < n; s++) {
    const o = t === "right";
    r[o ? s : n - s - 1] = e[o ? s : e.length - s - 1];
  }
  return r;
}
function Le(e, { strict: t = !0 } = {}) {
  return !e || typeof e != "string" ? !1 : t ? /^0x[0-9a-fA-F]*$/.test(e) : e.startsWith("0x");
}
function pe(e) {
  return Le(e, { strict: !1 }) ? Math.ceil((e.length - 2) / 2) : e.length;
}
function $e(e, { dir: t = "left" } = {}) {
  let n = typeof e == "string" ? e.replace("0x", "") : e, r = 0;
  for (let s = 0; s < n.length - 1 && n[t === "left" ? s : n.length - s - 1].toString() === "0"; s++)
    r++;
  return n = t === "left" ? n.slice(r) : n.slice(0, n.length - r), typeof e == "string" ? (n.length === 1 && t === "right" && (n = `${n}0`), `0x${n.length % 2 === 1 ? `0${n}` : n}`) : n;
}
const ns = /* @__PURE__ */ new TextEncoder();
function gn(e, t = {}) {
  return typeof e == "number" || typeof e == "bigint" ? ss(e, t) : typeof e == "boolean" ? rs(e, t) : Le(e) ? se(e, t) : bn(e, t);
}
function rs(e, t = {}) {
  const n = new Uint8Array(1);
  return n[0] = Number(e), typeof t.size == "number" ? (xe(n, { size: t.size }), ye(n, { size: t.size })) : n;
}
const D = {
  zero: 48,
  nine: 57,
  A: 65,
  F: 70,
  a: 97,
  f: 102
};
function At(e) {
  if (e >= D.zero && e <= D.nine)
    return e - D.zero;
  if (e >= D.A && e <= D.F)
    return e - (D.A - 10);
  if (e >= D.a && e <= D.f)
    return e - (D.a - 10);
}
function se(e, t = {}) {
  let n = e;
  t.size && (xe(n, { size: t.size }), n = ye(n, { dir: "right", size: t.size }));
  let r = n.slice(2);
  r.length % 2 && (r = `0${r}`);
  const s = r.length / 2, o = new Uint8Array(s);
  for (let i = 0, a = 0; i < s; i++) {
    const l = At(r.charCodeAt(a++)), d = At(r.charCodeAt(a++));
    if (l === void 0 || d === void 0)
      throw new L(`Invalid byte sequence ("${r[a - 2]}${r[a - 1]}" in "${r}").`);
    o[i] = l * 16 + d;
  }
  return o;
}
function ss(e, t) {
  const n = yn(e, t);
  return se(n);
}
function bn(e, t = {}) {
  const n = ns.encode(e);
  return typeof t.size == "number" ? (xe(n, { size: t.size }), ye(n, { dir: "right", size: t.size })) : n;
}
function xe(e, { size: t }) {
  if (pe(e) > t)
    throw new Zr({
      givenSize: pe(e),
      maxSize: t
    });
}
function fe(e, t = {}) {
  const { signed: n } = t;
  t.size && xe(e, { size: t.size });
  const r = BigInt(e);
  if (!n)
    return r;
  const s = (e.length - 2) / 2, o = (1n << BigInt(s) * 8n - 1n) - 1n;
  return r <= o ? r : r - BigInt(`0x${"f".padStart(s * 2, "f")}`) - 1n;
}
function Me(e, t = {}) {
  return Number(fe(e, t));
}
const os = /* @__PURE__ */ Array.from({ length: 256 }, (e, t) => t.toString(16).padStart(2, "0"));
function I(e, t = {}) {
  return typeof e == "number" || typeof e == "bigint" ? yn(e, t) : typeof e == "string" ? cs(e, t) : typeof e == "boolean" ? is(e, t) : ne(e, t);
}
function is(e, t = {}) {
  const n = `0x${Number(e)}`;
  return typeof t.size == "number" ? (xe(n, { size: t.size }), ye(n, { size: t.size })) : n;
}
function ne(e, t = {}) {
  let n = "";
  for (let s = 0; s < e.length; s++)
    n += os[e[s]];
  const r = `0x${n}`;
  return typeof t.size == "number" ? (xe(r, { size: t.size }), ye(r, { dir: "right", size: t.size })) : r;
}
function yn(e, t = {}) {
  const { signed: n, size: r } = t, s = BigInt(e);
  let o;
  r ? n ? o = (1n << BigInt(r) * 8n - 1n) - 1n : o = 2n ** (BigInt(r) * 8n) - 1n : typeof e == "number" && (o = BigInt(Number.MAX_SAFE_INTEGER));
  const i = typeof o == "bigint" && n ? -o - 1n : 0;
  if (o && s > o || s < i) {
    const l = typeof e == "bigint" ? "n" : "";
    throw new Xr({
      max: o ? `${o}${l}` : void 0,
      min: `${i}${l}`,
      signed: n,
      size: r,
      value: `${e}${l}`
    });
  }
  const a = `0x${(n && s < 0 ? (1n << BigInt(r * 8)) + BigInt(s) : s).toString(16)}`;
  return r ? ye(a, { size: r }) : a;
}
const as = /* @__PURE__ */ new TextEncoder();
function cs(e, t = {}) {
  const n = as.encode(e);
  return ne(n, t);
}
function Re(e) {
  return `0x${e.reduce((t, n) => t + n.replace("0x", ""), "")}`;
}
class oe extends L {
  constructor({ address: t }) {
    super(`Address "${t}" is invalid.`, {
      metaMessages: [
        "- Address must be a hex value of 20 bytes (40 hex characters).",
        "- Address must match its checksum counterpart."
      ],
      name: "InvalidAddressError"
    });
  }
}
class xn extends Map {
  constructor(t) {
    super(), Object.defineProperty(this, "maxSize", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), this.maxSize = t;
  }
  get(t) {
    const n = super.get(t);
    return super.has(t) && n !== void 0 && (this.delete(t), super.set(t, n)), n;
  }
  set(t, n) {
    if (super.set(t, n), this.maxSize && this.size > this.maxSize) {
      const r = this.keys().next().value;
      r && this.delete(r);
    }
    return this;
  }
}
function Tt(e) {
  if (!Number.isSafeInteger(e) || e < 0)
    throw new Error("positive integer expected, got " + e);
}
function ls(e) {
  return e instanceof Uint8Array || ArrayBuffer.isView(e) && e.constructor.name === "Uint8Array";
}
function ut(e, ...t) {
  if (!ls(e))
    throw new Error("Uint8Array expected");
  if (t.length > 0 && !t.includes(e.length))
    throw new Error("Uint8Array expected of length " + t + ", got length=" + e.length);
}
function We(e, t = !0) {
  if (e.destroyed)
    throw new Error("Hash instance has been destroyed");
  if (t && e.finished)
    throw new Error("Hash#digest() has already been called");
}
function wn(e, t) {
  ut(e);
  const n = t.outputLen;
  if (e.length < n)
    throw new Error("digestInto() expects output buffer of length at least " + n);
}
const Fe = /* @__PURE__ */ BigInt(2 ** 32 - 1), St = /* @__PURE__ */ BigInt(32);
function ds(e, t = !1) {
  return t ? { h: Number(e & Fe), l: Number(e >> St & Fe) } : { h: Number(e >> St & Fe) | 0, l: Number(e & Fe) | 0 };
}
function us(e, t = !1) {
  let n = new Uint32Array(e.length), r = new Uint32Array(e.length);
  for (let s = 0; s < e.length; s++) {
    const { h: o, l: i } = ds(e[s], t);
    [n[s], r[s]] = [o, i];
  }
  return [n, r];
}
const fs = (e, t, n) => e << n | t >>> 32 - n, hs = (e, t, n) => t << n | e >>> 32 - n, ps = (e, t, n) => t << n - 32 | e >>> 64 - n, ms = (e, t, n) => e << n - 32 | t >>> 64 - n;
/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */
function gs(e) {
  return new Uint32Array(e.buffer, e.byteOffset, Math.floor(e.byteLength / 4));
}
function Ke(e) {
  return new DataView(e.buffer, e.byteOffset, e.byteLength);
}
function H(e, t) {
  return e << 32 - t | e >>> t;
}
const Lt = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
function bs(e) {
  return e << 24 & 4278190080 | e << 8 & 16711680 | e >>> 8 & 65280 | e >>> 24 & 255;
}
function Rt(e) {
  for (let t = 0; t < e.length; t++)
    e[t] = bs(e[t]);
}
function ys(e) {
  if (typeof e != "string")
    throw new Error("utf8ToBytes expected string, got " + typeof e);
  return new Uint8Array(new TextEncoder().encode(e));
}
function ft(e) {
  return typeof e == "string" && (e = ys(e)), ut(e), e;
}
class vn {
  // Safe version that clones internal state
  clone() {
    return this._cloneInto();
  }
}
function Cn(e) {
  const t = (r) => e().update(ft(r)).digest(), n = e();
  return t.outputLen = n.outputLen, t.blockLen = n.blockLen, t.create = () => e(), t;
}
const In = [], kn = [], En = [], xs = /* @__PURE__ */ BigInt(0), Ae = /* @__PURE__ */ BigInt(1), ws = /* @__PURE__ */ BigInt(2), vs = /* @__PURE__ */ BigInt(7), Cs = /* @__PURE__ */ BigInt(256), Is = /* @__PURE__ */ BigInt(113);
for (let e = 0, t = Ae, n = 1, r = 0; e < 24; e++) {
  [n, r] = [r, (2 * n + 3 * r) % 5], In.push(2 * (5 * r + n)), kn.push((e + 1) * (e + 2) / 2 % 64);
  let s = xs;
  for (let o = 0; o < 7; o++)
    t = (t << Ae ^ (t >> vs) * Is) % Cs, t & ws && (s ^= Ae << (Ae << /* @__PURE__ */ BigInt(o)) - Ae);
  En.push(s);
}
const [ks, Es] = /* @__PURE__ */ us(En, !0), Bt = (e, t, n) => n > 32 ? ps(e, t, n) : fs(e, t, n), _t = (e, t, n) => n > 32 ? ms(e, t, n) : hs(e, t, n);
function Ps(e, t = 24) {
  const n = new Uint32Array(10);
  for (let r = 24 - t; r < 24; r++) {
    for (let i = 0; i < 10; i++)
      n[i] = e[i] ^ e[i + 10] ^ e[i + 20] ^ e[i + 30] ^ e[i + 40];
    for (let i = 0; i < 10; i += 2) {
      const a = (i + 8) % 10, l = (i + 2) % 10, d = n[l], h = n[l + 1], u = Bt(d, h, 1) ^ n[a], f = _t(d, h, 1) ^ n[a + 1];
      for (let m = 0; m < 50; m += 10)
        e[i + m] ^= u, e[i + m + 1] ^= f;
    }
    let s = e[2], o = e[3];
    for (let i = 0; i < 24; i++) {
      const a = kn[i], l = Bt(s, o, a), d = _t(s, o, a), h = In[i];
      s = e[h], o = e[h + 1], e[h] = l, e[h + 1] = d;
    }
    for (let i = 0; i < 50; i += 10) {
      for (let a = 0; a < 10; a++)
        n[a] = e[i + a];
      for (let a = 0; a < 10; a++)
        e[i + a] ^= ~n[(a + 2) % 10] & n[(a + 4) % 10];
    }
    e[0] ^= ks[r], e[1] ^= Es[r];
  }
  n.fill(0);
}
class ht extends vn {
  // NOTE: we accept arguments in bytes instead of bits here.
  constructor(t, n, r, s = !1, o = 24) {
    if (super(), this.blockLen = t, this.suffix = n, this.outputLen = r, this.enableXOF = s, this.rounds = o, this.pos = 0, this.posOut = 0, this.finished = !1, this.destroyed = !1, Tt(r), 0 >= this.blockLen || this.blockLen >= 200)
      throw new Error("Sha3 supports only keccak-f1600 function");
    this.state = new Uint8Array(200), this.state32 = gs(this.state);
  }
  keccak() {
    Lt || Rt(this.state32), Ps(this.state32, this.rounds), Lt || Rt(this.state32), this.posOut = 0, this.pos = 0;
  }
  update(t) {
    We(this);
    const { blockLen: n, state: r } = this;
    t = ft(t);
    const s = t.length;
    for (let o = 0; o < s; ) {
      const i = Math.min(n - this.pos, s - o);
      for (let a = 0; a < i; a++)
        r[this.pos++] ^= t[o++];
      this.pos === n && this.keccak();
    }
    return this;
  }
  finish() {
    if (this.finished)
      return;
    this.finished = !0;
    const { state: t, suffix: n, pos: r, blockLen: s } = this;
    t[r] ^= n, n & 128 && r === s - 1 && this.keccak(), t[s - 1] ^= 128, this.keccak();
  }
  writeInto(t) {
    We(this, !1), ut(t), this.finish();
    const n = this.state, { blockLen: r } = this;
    for (let s = 0, o = t.length; s < o; ) {
      this.posOut >= r && this.keccak();
      const i = Math.min(r - this.posOut, o - s);
      t.set(n.subarray(this.posOut, this.posOut + i), s), this.posOut += i, s += i;
    }
    return t;
  }
  xofInto(t) {
    if (!this.enableXOF)
      throw new Error("XOF is not possible for this instance");
    return this.writeInto(t);
  }
  xof(t) {
    return Tt(t), this.xofInto(new Uint8Array(t));
  }
  digestInto(t) {
    if (wn(t, this), this.finished)
      throw new Error("digest() was already called");
    return this.writeInto(t), this.destroy(), t;
  }
  digest() {
    return this.digestInto(new Uint8Array(this.outputLen));
  }
  destroy() {
    this.destroyed = !0, this.state.fill(0);
  }
  _cloneInto(t) {
    const { blockLen: n, suffix: r, outputLen: s, rounds: o, enableXOF: i } = this;
    return t || (t = new ht(n, r, s, i, o)), t.state32.set(this.state32), t.pos = this.pos, t.posOut = this.posOut, t.finished = this.finished, t.rounds = o, t.suffix = r, t.outputLen = s, t.enableXOF = i, t.destroyed = this.destroyed, t;
  }
}
const Ns = (e, t, n) => Cn(() => new ht(t, e, n)), As = /* @__PURE__ */ Ns(1, 136, 256 / 8);
function Ts(e, t) {
  return As(Le(e, { strict: !1 }) ? gn(e) : e);
}
const qe = /* @__PURE__ */ new xn(8192);
function Ss(e, t) {
  if (qe.has(`${e}.${t}`))
    return qe.get(`${e}.${t}`);
  const n = e.substring(2).toLowerCase(), r = Ts(bn(n)), s = n.split("");
  for (let i = 0; i < 40; i += 2)
    r[i >> 1] >> 4 >= 8 && s[i] && (s[i] = s[i].toUpperCase()), (r[i >> 1] & 15) >= 8 && s[i + 1] && (s[i + 1] = s[i + 1].toUpperCase());
  const o = `0x${s.join("")}`;
  return qe.set(`${e}.${t}`, o), o;
}
const Ls = /^0x[a-fA-F0-9]{40}$/, Ye = /* @__PURE__ */ new xn(8192);
function ie(e, t) {
  const { strict: n = !0 } = t ?? {}, r = `${e}.${n}`;
  if (Ye.has(r))
    return Ye.get(r);
  const s = Ls.test(e) ? e.toLowerCase() === e ? !0 : n ? Ss(e) === e : !0 : !1;
  return Ye.set(r, s), s;
}
function Rs(e, t, n, { strict: r } = {}) {
  return Le(e, { strict: !1 }) ? _s(e, t, n, {
    strict: r
  }) : Bs(e, t, n, {
    strict: r
  });
}
function Pn(e, t, n) {
  if (pe(e) !== n - t)
    throw new Qr({
      offset: n,
      position: "end",
      size: pe(e)
    });
}
function Bs(e, t, n, { strict: r } = {}) {
  const s = e.slice(t, n);
  return r && Pn(s, t, n), s;
}
function _s(e, t, n, { strict: r } = {}) {
  const s = `0x${e.replace("0x", "").slice(t * 2, n * 2)}`;
  return r && Pn(s, t, n), s;
}
class zt extends L {
  constructor({ offset: t }) {
    super(`Offset \`${t}\` cannot be negative.`, {
      name: "NegativeOffsetError"
    });
  }
}
class zs extends L {
  constructor({ length: t, position: n }) {
    super(`Position \`${n}\` is out of bounds (\`0 < position < ${t}\`).`, { name: "PositionOutOfBoundsError" });
  }
}
class Os extends L {
  constructor({ count: t, limit: n }) {
    super(`Recursive read limit of \`${n}\` exceeded (recursive read count: \`${t}\`).`, { name: "RecursiveReadLimitExceededError" });
  }
}
const Us = {
  bytes: new Uint8Array(),
  dataView: new DataView(new ArrayBuffer(0)),
  position: 0,
  positionReadCount: /* @__PURE__ */ new Map(),
  recursiveReadCount: 0,
  recursiveReadLimit: Number.POSITIVE_INFINITY,
  assertReadLimit() {
    if (this.recursiveReadCount >= this.recursiveReadLimit)
      throw new Os({
        count: this.recursiveReadCount + 1,
        limit: this.recursiveReadLimit
      });
  },
  assertPosition(e) {
    if (e < 0 || e > this.bytes.length - 1)
      throw new zs({
        length: this.bytes.length,
        position: e
      });
  },
  decrementPosition(e) {
    if (e < 0)
      throw new zt({ offset: e });
    const t = this.position - e;
    this.assertPosition(t), this.position = t;
  },
  getReadCount(e) {
    return this.positionReadCount.get(e || this.position) || 0;
  },
  incrementPosition(e) {
    if (e < 0)
      throw new zt({ offset: e });
    const t = this.position + e;
    this.assertPosition(t), this.position = t;
  },
  inspectByte(e) {
    const t = e ?? this.position;
    return this.assertPosition(t), this.bytes[t];
  },
  inspectBytes(e, t) {
    const n = t ?? this.position;
    return this.assertPosition(n + e - 1), this.bytes.subarray(n, n + e);
  },
  inspectUint8(e) {
    const t = e ?? this.position;
    return this.assertPosition(t), this.bytes[t];
  },
  inspectUint16(e) {
    const t = e ?? this.position;
    return this.assertPosition(t + 1), this.dataView.getUint16(t);
  },
  inspectUint24(e) {
    const t = e ?? this.position;
    return this.assertPosition(t + 2), (this.dataView.getUint16(t) << 8) + this.dataView.getUint8(t + 2);
  },
  inspectUint32(e) {
    const t = e ?? this.position;
    return this.assertPosition(t + 3), this.dataView.getUint32(t);
  },
  pushByte(e) {
    this.assertPosition(this.position), this.bytes[this.position] = e, this.position++;
  },
  pushBytes(e) {
    this.assertPosition(this.position + e.length - 1), this.bytes.set(e, this.position), this.position += e.length;
  },
  pushUint8(e) {
    this.assertPosition(this.position), this.bytes[this.position] = e, this.position++;
  },
  pushUint16(e) {
    this.assertPosition(this.position + 1), this.dataView.setUint16(this.position, e), this.position += 2;
  },
  pushUint24(e) {
    this.assertPosition(this.position + 2), this.dataView.setUint16(this.position, e >> 8), this.dataView.setUint8(this.position + 2, e & 255), this.position += 3;
  },
  pushUint32(e) {
    this.assertPosition(this.position + 3), this.dataView.setUint32(this.position, e), this.position += 4;
  },
  readByte() {
    this.assertReadLimit(), this._touch();
    const e = this.inspectByte();
    return this.position++, e;
  },
  readBytes(e, t) {
    this.assertReadLimit(), this._touch();
    const n = this.inspectBytes(e);
    return this.position += t ?? e, n;
  },
  readUint8() {
    this.assertReadLimit(), this._touch();
    const e = this.inspectUint8();
    return this.position += 1, e;
  },
  readUint16() {
    this.assertReadLimit(), this._touch();
    const e = this.inspectUint16();
    return this.position += 2, e;
  },
  readUint24() {
    this.assertReadLimit(), this._touch();
    const e = this.inspectUint24();
    return this.position += 3, e;
  },
  readUint32() {
    this.assertReadLimit(), this._touch();
    const e = this.inspectUint32();
    return this.position += 4, e;
  },
  get remaining() {
    return this.bytes.length - this.position;
  },
  setPosition(e) {
    const t = this.position;
    return this.assertPosition(e), this.position = e, () => this.position = t;
  },
  _touch() {
    if (this.recursiveReadLimit === Number.POSITIVE_INFINITY)
      return;
    const e = this.getReadCount();
    this.positionReadCount.set(this.position, e + 1), e > 0 && this.recursiveReadCount++;
  }
};
function Nn(e, { recursiveReadLimit: t = 8192 } = {}) {
  const n = Object.create(Us);
  return n.bytes = e, n.dataView = new DataView(e.buffer, e.byteOffset, e.byteLength), n.positionReadCount = /* @__PURE__ */ new Map(), n.recursiveReadLimit = t, n;
}
function ae(e, t = "hex") {
  const n = An(e), r = Nn(new Uint8Array(n.length));
  return n.encode(r), t === "hex" ? ne(r.bytes) : r.bytes;
}
function An(e) {
  return Array.isArray(e) ? Gs(e.map((t) => An(t))) : Fs(e);
}
function Gs(e) {
  const t = e.reduce((s, o) => s + o.length, 0), n = Tn(t);
  return {
    length: t <= 55 ? 1 + t : 1 + n + t,
    encode(s) {
      t <= 55 ? s.pushByte(192 + t) : (s.pushByte(247 + n), n === 1 ? s.pushUint8(t) : n === 2 ? s.pushUint16(t) : n === 3 ? s.pushUint24(t) : s.pushUint32(t));
      for (const { encode: o } of e)
        o(s);
    }
  };
}
function Fs(e) {
  const t = typeof e == "string" ? se(e) : e, n = Tn(t.length);
  return {
    length: t.length === 1 && t[0] < 128 ? 1 : t.length <= 55 ? 1 + t.length : 1 + n + t.length,
    encode(s) {
      t.length === 1 && t[0] < 128 ? s.pushBytes(t) : t.length <= 55 ? (s.pushByte(128 + t.length), s.pushBytes(t)) : (s.pushByte(183 + n), n === 1 ? s.pushUint8(t.length) : n === 2 ? s.pushUint16(t.length) : n === 3 ? s.pushUint24(t.length) : s.pushUint32(t.length), s.pushBytes(t));
    }
  };
}
function Tn(e) {
  if (e < 2 ** 8)
    return 1;
  if (e < 2 ** 16)
    return 2;
  if (e < 2 ** 24)
    return 3;
  if (e < 2 ** 32)
    return 4;
  throw new L("Length is too large.");
}
class Ve extends L {
  constructor({ chainId: t }) {
    super(typeof t == "number" ? `Chain ID "${t}" is invalid.` : "Chain ID is invalid.", { name: "InvalidChainIdError" });
  }
}
const $s = {
  ether: -9,
  wei: 9
};
function Ms(e, t) {
  let n = e.toString();
  const r = n.startsWith("-");
  r && (n = n.slice(1)), n = n.padStart(t, "0");
  let [s, o] = [
    n.slice(0, n.length - t),
    n.slice(n.length - t)
  ];
  return o = o.replace(/(0+)$/, ""), `${r ? "-" : ""}${s || "0"}${o ? `.${o}` : ""}`;
}
function ot(e, t = "wei") {
  return Ms(e, $s[t]);
}
class je extends L {
  constructor({ cause: t, maxFeePerGas: n } = {}) {
    super(`The fee cap (\`maxFeePerGas\`${n ? ` = ${ot(n)} gwei` : ""}) cannot be higher than the maximum allowed value (2^256-1).`, {
      cause: t,
      name: "FeeCapTooHighError"
    });
  }
}
Object.defineProperty(je, "nodeMessage", {
  enumerable: !0,
  configurable: !0,
  writable: !0,
  value: /max fee per gas higher than 2\^256-1|fee cap higher than 2\^256-1/
});
class Sn extends L {
  constructor({ cause: t, maxPriorityFeePerGas: n, maxFeePerGas: r } = {}) {
    super([
      `The provided tip (\`maxPriorityFeePerGas\`${n ? ` = ${ot(n)} gwei` : ""}) cannot be higher than the fee cap (\`maxFeePerGas\`${r ? ` = ${ot(r)} gwei` : ""}).`
    ].join(`
`), {
      cause: t,
      name: "TipAboveFeeCapError"
    });
  }
}
Object.defineProperty(Sn, "nodeMessage", {
  enumerable: !0,
  configurable: !0,
  writable: !0,
  value: /max priority fee per gas higher than max fee per gas|tip higher than fee cap/
});
function Ws(e) {
  const t = Object.entries(e).map(([r, s]) => s === void 0 || s === !1 ? null : [r, s]).filter(Boolean), n = t.reduce((r, [s]) => Math.max(r, s.length), 0);
  return t.map(([r, s]) => `  ${`${r}:`.padEnd(n + 1)}  ${s}`).join(`
`);
}
class Hs extends L {
  constructor({ v: t }) {
    super(`Invalid \`v\` value "${t}". Expected 27 or 28.`, {
      name: "InvalidLegacyVError"
    });
  }
}
class Vs extends L {
  constructor({ transaction: t }) {
    super("Cannot infer a transaction type from provided transaction.", {
      metaMessages: [
        "Provided Transaction:",
        "{",
        Ws(t),
        "}",
        "",
        "To infer the type, either provide:",
        "- a `type` to the Transaction, or",
        "- an EIP-1559 Transaction with `maxFeePerGas`, or",
        "- an EIP-2930 Transaction with `gasPrice` & `accessList`, or",
        "- an EIP-4844 Transaction with `blobs`, `blobVersionedHashes`, `sidecars`, or",
        "- an EIP-7702 Transaction with `authorizationList`, or",
        "- a Legacy Transaction with `gasPrice`"
      ],
      name: "InvalidSerializableTransactionError"
    });
  }
}
class js extends L {
  constructor({ storageKey: t }) {
    super(`Size for storage key "${t}" is invalid. Expected 32 bytes. Got ${Math.floor((t.length - 2) / 2)} bytes.`, { name: "InvalidStorageKeySizeError" });
  }
}
function pt(e, t) {
  return ({ exclude: n, format: r }) => ({
    exclude: n,
    format: (s) => {
      const o = t(s);
      if (n)
        for (const i of n)
          delete o[i];
      return {
        ...o,
        ...r(s)
      };
    },
    type: e
  });
}
const mt = 2n ** 256n - 1n, Ln = {
  "0x0": "legacy",
  "0x1": "eip2930",
  "0x2": "eip1559",
  "0x3": "eip4844",
  "0x4": "eip7702"
};
function gt(e) {
  const t = {
    ...e,
    blockHash: e.blockHash ? e.blockHash : null,
    blockNumber: e.blockNumber ? BigInt(e.blockNumber) : null,
    chainId: e.chainId ? Me(e.chainId) : void 0,
    gas: e.gas ? BigInt(e.gas) : void 0,
    gasPrice: e.gasPrice ? BigInt(e.gasPrice) : void 0,
    maxFeePerBlobGas: e.maxFeePerBlobGas ? BigInt(e.maxFeePerBlobGas) : void 0,
    maxFeePerGas: e.maxFeePerGas ? BigInt(e.maxFeePerGas) : void 0,
    maxPriorityFeePerGas: e.maxPriorityFeePerGas ? BigInt(e.maxPriorityFeePerGas) : void 0,
    nonce: e.nonce ? Me(e.nonce) : void 0,
    to: e.to ? e.to : null,
    transactionIndex: e.transactionIndex ? Number(e.transactionIndex) : null,
    type: e.type ? Ln[e.type] : void 0,
    typeHex: e.type ? e.type : void 0,
    value: e.value ? BigInt(e.value) : void 0,
    v: e.v ? BigInt(e.v) : void 0
  };
  return e.authorizationList && (t.authorizationList = Js(e.authorizationList)), t.yParity = (() => {
    if (e.yParity)
      return Number(e.yParity);
    if (typeof t.v == "bigint") {
      if (t.v === 0n || t.v === 27n)
        return 0;
      if (t.v === 1n || t.v === 28n)
        return 1;
      if (t.v >= 35n)
        return t.v % 2n === 0n ? 1 : 0;
    }
  })(), t.type === "legacy" && (delete t.accessList, delete t.maxFeePerBlobGas, delete t.maxFeePerGas, delete t.maxPriorityFeePerGas, delete t.yParity), t.type === "eip2930" && (delete t.maxFeePerBlobGas, delete t.maxFeePerGas, delete t.maxPriorityFeePerGas), t.type === "eip1559" && delete t.maxFeePerBlobGas, t;
}
const Ds = /* @__PURE__ */ pt("transaction", gt);
function Js(e) {
  return e.map((t) => ({
    address: t.address,
    chainId: Number(t.chainId),
    nonce: Number(t.nonce),
    r: t.r,
    s: t.s,
    yParity: Number(t.yParity)
  }));
}
function Ks(e) {
  const t = (e.transactions ?? []).map((n) => typeof n == "string" ? n : gt(n));
  return {
    ...e,
    baseFeePerGas: e.baseFeePerGas ? BigInt(e.baseFeePerGas) : null,
    blobGasUsed: e.blobGasUsed ? BigInt(e.blobGasUsed) : void 0,
    difficulty: e.difficulty ? BigInt(e.difficulty) : void 0,
    excessBlobGas: e.excessBlobGas ? BigInt(e.excessBlobGas) : void 0,
    gasLimit: e.gasLimit ? BigInt(e.gasLimit) : void 0,
    gasUsed: e.gasUsed ? BigInt(e.gasUsed) : void 0,
    hash: e.hash ? e.hash : null,
    logsBloom: e.logsBloom ? e.logsBloom : null,
    nonce: e.nonce ? e.nonce : null,
    number: e.number ? BigInt(e.number) : null,
    size: e.size ? BigInt(e.size) : void 0,
    timestamp: e.timestamp ? BigInt(e.timestamp) : void 0,
    transactions: t,
    totalDifficulty: e.totalDifficulty ? BigInt(e.totalDifficulty) : null
  };
}
const qs = /* @__PURE__ */ pt("block", Ks);
function Rn(e) {
  const { kzg: t } = e, n = e.to ?? (typeof e.blobs[0] == "string" ? "hex" : "bytes"), r = typeof e.blobs[0] == "string" ? e.blobs.map((o) => se(o)) : e.blobs, s = [];
  for (const o of r)
    s.push(Uint8Array.from(t.blobToKzgCommitment(o)));
  return n === "bytes" ? s : s.map((o) => ne(o));
}
function Bn(e) {
  const { kzg: t } = e, n = e.to ?? (typeof e.blobs[0] == "string" ? "hex" : "bytes"), r = typeof e.blobs[0] == "string" ? e.blobs.map((i) => se(i)) : e.blobs, s = typeof e.commitments[0] == "string" ? e.commitments.map((i) => se(i)) : e.commitments, o = [];
  for (let i = 0; i < r.length; i++) {
    const a = r[i], l = s[i];
    o.push(Uint8Array.from(t.computeBlobKzgProof(a, l)));
  }
  return n === "bytes" ? o : o.map((i) => ne(i));
}
function Ys(e, t, n, r) {
  if (typeof e.setBigUint64 == "function")
    return e.setBigUint64(t, n, r);
  const s = BigInt(32), o = BigInt(4294967295), i = Number(n >> s & o), a = Number(n & o), l = r ? 4 : 0, d = r ? 0 : 4;
  e.setUint32(t + l, i, r), e.setUint32(t + d, a, r);
}
function Xs(e, t, n) {
  return e & t ^ ~e & n;
}
function Zs(e, t, n) {
  return e & t ^ e & n ^ t & n;
}
class Qs extends vn {
  constructor(t, n, r, s) {
    super(), this.blockLen = t, this.outputLen = n, this.padOffset = r, this.isLE = s, this.finished = !1, this.length = 0, this.pos = 0, this.destroyed = !1, this.buffer = new Uint8Array(t), this.view = Ke(this.buffer);
  }
  update(t) {
    We(this);
    const { view: n, buffer: r, blockLen: s } = this;
    t = ft(t);
    const o = t.length;
    for (let i = 0; i < o; ) {
      const a = Math.min(s - this.pos, o - i);
      if (a === s) {
        const l = Ke(t);
        for (; s <= o - i; i += s)
          this.process(l, i);
        continue;
      }
      r.set(t.subarray(i, i + a), this.pos), this.pos += a, i += a, this.pos === s && (this.process(n, 0), this.pos = 0);
    }
    return this.length += t.length, this.roundClean(), this;
  }
  digestInto(t) {
    We(this), wn(t, this), this.finished = !0;
    const { buffer: n, view: r, blockLen: s, isLE: o } = this;
    let { pos: i } = this;
    n[i++] = 128, this.buffer.subarray(i).fill(0), this.padOffset > s - i && (this.process(r, 0), i = 0);
    for (let u = i; u < s; u++)
      n[u] = 0;
    Ys(r, s - 8, BigInt(this.length * 8), o), this.process(r, 0);
    const a = Ke(t), l = this.outputLen;
    if (l % 4)
      throw new Error("_sha2: outputLen should be aligned to 32bit");
    const d = l / 4, h = this.get();
    if (d > h.length)
      throw new Error("_sha2: outputLen bigger than state");
    for (let u = 0; u < d; u++)
      a.setUint32(4 * u, h[u], o);
  }
  digest() {
    const { buffer: t, outputLen: n } = this;
    this.digestInto(t);
    const r = t.slice(0, n);
    return this.destroy(), r;
  }
  _cloneInto(t) {
    t || (t = new this.constructor()), t.set(...this.get());
    const { blockLen: n, buffer: r, length: s, finished: o, destroyed: i, pos: a } = this;
    return t.length = s, t.pos = a, t.finished = o, t.destroyed = i, s % n && t.buffer.set(r), t;
  }
}
const eo = /* @__PURE__ */ new Uint32Array([
  1116352408,
  1899447441,
  3049323471,
  3921009573,
  961987163,
  1508970993,
  2453635748,
  2870763221,
  3624381080,
  310598401,
  607225278,
  1426881987,
  1925078388,
  2162078206,
  2614888103,
  3248222580,
  3835390401,
  4022224774,
  264347078,
  604807628,
  770255983,
  1249150122,
  1555081692,
  1996064986,
  2554220882,
  2821834349,
  2952996808,
  3210313671,
  3336571891,
  3584528711,
  113926993,
  338241895,
  666307205,
  773529912,
  1294757372,
  1396182291,
  1695183700,
  1986661051,
  2177026350,
  2456956037,
  2730485921,
  2820302411,
  3259730800,
  3345764771,
  3516065817,
  3600352804,
  4094571909,
  275423344,
  430227734,
  506948616,
  659060556,
  883997877,
  958139571,
  1322822218,
  1537002063,
  1747873779,
  1955562222,
  2024104815,
  2227730452,
  2361852424,
  2428436474,
  2756734187,
  3204031479,
  3329325298
]), Z = /* @__PURE__ */ new Uint32Array([
  1779033703,
  3144134277,
  1013904242,
  2773480762,
  1359893119,
  2600822924,
  528734635,
  1541459225
]), Q = /* @__PURE__ */ new Uint32Array(64);
class to extends Qs {
  constructor() {
    super(64, 32, 8, !1), this.A = Z[0] | 0, this.B = Z[1] | 0, this.C = Z[2] | 0, this.D = Z[3] | 0, this.E = Z[4] | 0, this.F = Z[5] | 0, this.G = Z[6] | 0, this.H = Z[7] | 0;
  }
  get() {
    const { A: t, B: n, C: r, D: s, E: o, F: i, G: a, H: l } = this;
    return [t, n, r, s, o, i, a, l];
  }
  // prettier-ignore
  set(t, n, r, s, o, i, a, l) {
    this.A = t | 0, this.B = n | 0, this.C = r | 0, this.D = s | 0, this.E = o | 0, this.F = i | 0, this.G = a | 0, this.H = l | 0;
  }
  process(t, n) {
    for (let u = 0; u < 16; u++, n += 4)
      Q[u] = t.getUint32(n, !1);
    for (let u = 16; u < 64; u++) {
      const f = Q[u - 15], m = Q[u - 2], x = H(f, 7) ^ H(f, 18) ^ f >>> 3, p = H(m, 17) ^ H(m, 19) ^ m >>> 10;
      Q[u] = p + Q[u - 7] + x + Q[u - 16] | 0;
    }
    let { A: r, B: s, C: o, D: i, E: a, F: l, G: d, H: h } = this;
    for (let u = 0; u < 64; u++) {
      const f = H(a, 6) ^ H(a, 11) ^ H(a, 25), m = h + f + Xs(a, l, d) + eo[u] + Q[u] | 0, p = (H(r, 2) ^ H(r, 13) ^ H(r, 22)) + Zs(r, s, o) | 0;
      h = d, d = l, l = a, a = i + m | 0, i = o, o = s, s = r, r = m + p | 0;
    }
    r = r + this.A | 0, s = s + this.B | 0, o = o + this.C | 0, i = i + this.D | 0, a = a + this.E | 0, l = l + this.F | 0, d = d + this.G | 0, h = h + this.H | 0, this.set(r, s, o, i, a, l, d, h);
  }
  roundClean() {
    Q.fill(0);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0, 0, 0, 0), this.buffer.fill(0);
  }
}
const no = /* @__PURE__ */ Cn(() => new to());
function ro(e, t) {
  return no(Le(e, { strict: !1 }) ? gn(e) : e);
}
function so(e) {
  const { commitment: t, version: n = 1 } = e, r = e.to ?? (typeof t == "string" ? "hex" : "bytes"), s = ro(t);
  return s.set([n], 0), r === "bytes" ? s : ne(s);
}
function oo(e) {
  const { commitments: t, version: n } = e, r = e.to ?? (typeof t[0] == "string" ? "hex" : "bytes"), s = [];
  for (const o of t)
    s.push(so({
      commitment: o,
      to: r,
      version: n
    }));
  return s;
}
const Ot = 6, _n = 32, bt = 4096, zn = _n * bt, Ut = zn * Ot - // terminator byte (0x80).
1 - // zero byte (0x00) appended to each field element.
1 * bt * Ot, On = 1;
class io extends L {
  constructor({ maxSize: t, size: n }) {
    super("Blob size is too large.", {
      metaMessages: [`Max: ${t} bytes`, `Given: ${n} bytes`],
      name: "BlobSizeTooLargeError"
    });
  }
}
class Un extends L {
  constructor() {
    super("Blob data must not be empty.", { name: "EmptyBlobError" });
  }
}
class ao extends L {
  constructor({ hash: t, size: n }) {
    super(`Versioned hash "${t}" size is invalid.`, {
      metaMessages: ["Expected: 32", `Received: ${n}`],
      name: "InvalidVersionedHashSizeError"
    });
  }
}
class co extends L {
  constructor({ hash: t, version: n }) {
    super(`Versioned hash "${t}" version is invalid.`, {
      metaMessages: [
        `Expected: ${On}`,
        `Received: ${n}`
      ],
      name: "InvalidVersionedHashVersionError"
    });
  }
}
function lo(e) {
  const t = e.to ?? (typeof e.data == "string" ? "hex" : "bytes"), n = typeof e.data == "string" ? se(e.data) : e.data, r = pe(n);
  if (!r)
    throw new Un();
  if (r > Ut)
    throw new io({
      maxSize: Ut,
      size: r
    });
  const s = [];
  let o = !0, i = 0;
  for (; o; ) {
    const a = Nn(new Uint8Array(zn));
    let l = 0;
    for (; l < bt; ) {
      const d = n.slice(i, i + (_n - 1));
      if (a.pushByte(0), a.pushBytes(d), d.length < 31) {
        a.pushByte(128), o = !1;
        break;
      }
      l++, i += 31;
    }
    s.push(a);
  }
  return t === "bytes" ? s.map((a) => a.bytes) : s.map((a) => ne(a.bytes));
}
function uo(e) {
  const { data: t, kzg: n, to: r } = e, s = e.blobs ?? lo({ data: t, to: r }), o = e.commitments ?? Rn({ blobs: s, kzg: n, to: r }), i = e.proofs ?? Bn({ blobs: s, commitments: o, kzg: n, to: r }), a = [];
  for (let l = 0; l < s.length; l++)
    a.push({
      blob: s[l],
      commitment: o[l],
      proof: i[l]
    });
  return a;
}
function fo(e) {
  if (e.type)
    return e.type;
  if (typeof e.authorizationList < "u")
    return "eip7702";
  if (typeof e.blobs < "u" || typeof e.blobVersionedHashes < "u" || typeof e.maxFeePerBlobGas < "u" || typeof e.sidecars < "u")
    return "eip4844";
  if (typeof e.maxFeePerGas < "u" || typeof e.maxPriorityFeePerGas < "u")
    return "eip1559";
  if (typeof e.gasPrice < "u")
    return typeof e.accessList < "u" ? "eip2930" : "legacy";
  throw new Vs({ transaction: e });
}
function ho(e, { args: t, eventName: n } = {}) {
  return {
    ...e,
    blockHash: e.blockHash ? e.blockHash : null,
    blockNumber: e.blockNumber ? BigInt(e.blockNumber) : null,
    logIndex: e.logIndex ? Number(e.logIndex) : null,
    transactionHash: e.transactionHash ? e.transactionHash : null,
    transactionIndex: e.transactionIndex ? Number(e.transactionIndex) : null,
    ...n ? { args: t, eventName: n } : {}
  };
}
const po = {
  "0x0": "reverted",
  "0x1": "success"
};
function mo(e) {
  const t = {
    ...e,
    blockNumber: e.blockNumber ? BigInt(e.blockNumber) : null,
    contractAddress: e.contractAddress ? e.contractAddress : null,
    cumulativeGasUsed: e.cumulativeGasUsed ? BigInt(e.cumulativeGasUsed) : null,
    effectiveGasPrice: e.effectiveGasPrice ? BigInt(e.effectiveGasPrice) : null,
    gasUsed: e.gasUsed ? BigInt(e.gasUsed) : null,
    logs: e.logs ? e.logs.map((n) => ho(n)) : null,
    to: e.to ? e.to : null,
    transactionIndex: e.transactionIndex ? Me(e.transactionIndex) : null,
    status: e.status ? po[e.status] : null,
    type: e.type ? Ln[e.type] || e.type : null
  };
  return e.blobGasPrice && (t.blobGasPrice = BigInt(e.blobGasPrice)), e.blobGasUsed && (t.blobGasUsed = BigInt(e.blobGasUsed)), t;
}
const go = /* @__PURE__ */ pt("transactionReceipt", mo);
function V(e) {
  return {
    formatters: void 0,
    fees: void 0,
    serializers: void 0,
    ...e
  };
}
function bo(e) {
  const { authorizationList: t } = e;
  if (t)
    for (const n of t) {
      const { chainId: r } = n, s = n.address;
      if (!ie(s))
        throw new oe({ address: s });
      if (r < 0)
        throw new Ve({ chainId: r });
    }
  yt(e);
}
function yo(e) {
  const { blobVersionedHashes: t } = e;
  if (t) {
    if (t.length === 0)
      throw new Un();
    for (const n of t) {
      const r = pe(n), s = Me(Rs(n, 0, 1));
      if (r !== 32)
        throw new ao({ hash: n, size: r });
      if (s !== On)
        throw new co({
          hash: n,
          version: s
        });
    }
  }
  yt(e);
}
function yt(e) {
  const { chainId: t, maxPriorityFeePerGas: n, maxFeePerGas: r, to: s } = e;
  if (t <= 0)
    throw new Ve({ chainId: t });
  if (s && !ie(s))
    throw new oe({ address: s });
  if (r && r > mt)
    throw new je({ maxFeePerGas: r });
  if (n && r && n > r)
    throw new Sn({ maxFeePerGas: r, maxPriorityFeePerGas: n });
}
function xo(e) {
  const { chainId: t, maxPriorityFeePerGas: n, gasPrice: r, maxFeePerGas: s, to: o } = e;
  if (t <= 0)
    throw new Ve({ chainId: t });
  if (o && !ie(o))
    throw new oe({ address: o });
  if (n || s)
    throw new L("`maxFeePerGas`/`maxPriorityFeePerGas` is not a valid EIP-2930 Transaction attribute.");
  if (r && r > mt)
    throw new je({ maxFeePerGas: r });
}
function wo(e) {
  const { chainId: t, maxPriorityFeePerGas: n, gasPrice: r, maxFeePerGas: s, to: o } = e;
  if (o && !ie(o))
    throw new oe({ address: o });
  if (typeof t < "u" && t <= 0)
    throw new Ve({ chainId: t });
  if (n || s)
    throw new L("`maxFeePerGas`/`maxPriorityFeePerGas` is not a valid Legacy Transaction attribute.");
  if (r && r > mt)
    throw new je({ maxFeePerGas: r });
}
function De(e) {
  if (!e || e.length === 0)
    return [];
  const t = [];
  for (let n = 0; n < e.length; n++) {
    const { address: r, storageKeys: s } = e[n];
    for (let o = 0; o < s.length; o++)
      if (s[o].length - 2 !== 64)
        throw new js({ storageKey: s[o] });
    if (!ie(r, { strict: !1 }))
      throw new oe({ address: r });
    t.push([r, s]);
  }
  return t;
}
function vo(e, t) {
  const n = fo(e);
  return n === "eip1559" ? ko(e, t) : n === "eip2930" ? Eo(e, t) : n === "eip4844" ? Io(e, t) : n === "eip7702" ? Co(e, t) : Po(e, t);
}
function Co(e, t) {
  const { authorizationList: n, chainId: r, gas: s, nonce: o, to: i, value: a, maxFeePerGas: l, maxPriorityFeePerGas: d, accessList: h, data: u } = e;
  bo(e);
  const f = De(h), m = No(n);
  return Re([
    "0x04",
    ae([
      I(r),
      o ? I(o) : "0x",
      d ? I(d) : "0x",
      l ? I(l) : "0x",
      s ? I(s) : "0x",
      i ?? "0x",
      a ? I(a) : "0x",
      u ?? "0x",
      f,
      m,
      ...Be(e, t)
    ])
  ]);
}
function Io(e, t) {
  const { chainId: n, gas: r, nonce: s, to: o, value: i, maxFeePerBlobGas: a, maxFeePerGas: l, maxPriorityFeePerGas: d, accessList: h, data: u } = e;
  yo(e);
  let f = e.blobVersionedHashes, m = e.sidecars;
  if (e.blobs && (typeof f > "u" || typeof m > "u")) {
    const N = typeof e.blobs[0] == "string" ? e.blobs : e.blobs.map((M) => ne(M)), B = e.kzg, U = Rn({
      blobs: N,
      kzg: B
    });
    if (typeof f > "u" && (f = oo({
      commitments: U
    })), typeof m > "u") {
      const M = Bn({ blobs: N, commitments: U, kzg: B });
      m = uo({ blobs: N, commitments: U, proofs: M });
    }
  }
  const x = De(h), p = [
    I(n),
    s ? I(s) : "0x",
    d ? I(d) : "0x",
    l ? I(l) : "0x",
    r ? I(r) : "0x",
    o ?? "0x",
    i ? I(i) : "0x",
    u ?? "0x",
    x,
    a ? I(a) : "0x",
    f ?? [],
    ...Be(e, t)
  ], b = [], y = [], v = [];
  if (m)
    for (let N = 0; N < m.length; N++) {
      const { blob: B, commitment: U, proof: M } = m[N];
      b.push(B), y.push(U), v.push(M);
    }
  return Re([
    "0x03",
    // If sidecars are enabled, envelope turns into a "wrapper":
    ae(m ? [p, b, y, v] : p)
  ]);
}
function ko(e, t) {
  const { chainId: n, gas: r, nonce: s, to: o, value: i, maxFeePerGas: a, maxPriorityFeePerGas: l, accessList: d, data: h } = e;
  yt(e);
  const u = De(d), f = [
    I(n),
    s ? I(s) : "0x",
    l ? I(l) : "0x",
    a ? I(a) : "0x",
    r ? I(r) : "0x",
    o ?? "0x",
    i ? I(i) : "0x",
    h ?? "0x",
    u,
    ...Be(e, t)
  ];
  return Re([
    "0x02",
    ae(f)
  ]);
}
function Eo(e, t) {
  const { chainId: n, gas: r, data: s, nonce: o, to: i, value: a, accessList: l, gasPrice: d } = e;
  xo(e);
  const h = De(l), u = [
    I(n),
    o ? I(o) : "0x",
    d ? I(d) : "0x",
    r ? I(r) : "0x",
    i ?? "0x",
    a ? I(a) : "0x",
    s ?? "0x",
    h,
    ...Be(e, t)
  ];
  return Re([
    "0x01",
    ae(u)
  ]);
}
function Po(e, t) {
  const { chainId: n = 0, gas: r, data: s, nonce: o, to: i, value: a, gasPrice: l } = e;
  wo(e);
  let d = [
    o ? I(o) : "0x",
    l ? I(l) : "0x",
    r ? I(r) : "0x",
    i ?? "0x",
    a ? I(a) : "0x",
    s ?? "0x"
  ];
  if (t) {
    const h = (() => {
      if (t.v >= 35n)
        return (t.v - 35n) / 2n > 0 ? t.v : 27n + (t.v === 35n ? 0n : 1n);
      if (n > 0)
        return BigInt(n * 2) + BigInt(35n + t.v - 27n);
      const m = 27n + (t.v === 27n ? 0n : 1n);
      if (t.v !== m)
        throw new Hs({ v: t.v });
      return m;
    })(), u = $e(t.r), f = $e(t.s);
    d = [
      ...d,
      I(h),
      u === "0x00" ? "0x" : u,
      f === "0x00" ? "0x" : f
    ];
  } else n > 0 && (d = [
    ...d,
    I(n),
    "0x",
    "0x"
  ]);
  return ae(d);
}
function Be(e, t) {
  const n = t ?? e, { v: r, yParity: s } = n;
  if (typeof n.r > "u")
    return [];
  if (typeof n.s > "u")
    return [];
  if (typeof r > "u" && typeof s > "u")
    return [];
  const o = $e(n.r), i = $e(n.s);
  return [typeof s == "number" ? s ? I(1) : "0x" : r === 0n ? "0x" : r === 1n ? I(1) : r === 27n ? "0x" : I(1), o === "0x00" ? "0x" : o, i === "0x00" ? "0x" : i];
}
function No(e) {
  if (!e || e.length === 0)
    return [];
  const t = [];
  for (const n of e) {
    const { chainId: r, nonce: s, ...o } = n, i = n.address;
    t.push([
      r ? I(r) : "0x",
      i,
      s ? I(s) : "0x",
      ...Be({}, o)
    ]);
  }
  return t;
}
function Ao(e) {
  const t = e.state.current, n = e.state.connections.get(t), r = n == null ? void 0 : n.accounts, s = r == null ? void 0 : r[0], o = e.chains.find((a) => a.id === (n == null ? void 0 : n.chainId)), i = e.state.status;
  switch (i) {
    case "connected":
      return {
        address: s,
        addresses: r,
        chain: o,
        chainId: n == null ? void 0 : n.chainId,
        connector: n == null ? void 0 : n.connector,
        isConnected: !0,
        isConnecting: !1,
        isDisconnected: !1,
        isReconnecting: !1,
        status: i
      };
    case "reconnecting":
      return {
        address: s,
        addresses: r,
        chain: o,
        chainId: n == null ? void 0 : n.chainId,
        connector: n == null ? void 0 : n.connector,
        isConnected: !!s,
        isConnecting: !1,
        isDisconnected: !1,
        isReconnecting: !0,
        status: i
      };
    case "connecting":
      return {
        address: s,
        addresses: r,
        chain: o,
        chainId: n == null ? void 0 : n.chainId,
        connector: n == null ? void 0 : n.connector,
        isConnected: !1,
        isConnecting: !0,
        isDisconnected: !1,
        isReconnecting: !1,
        status: i
      };
    case "disconnected":
      return {
        address: void 0,
        addresses: void 0,
        chain: void 0,
        chainId: void 0,
        connector: void 0,
        isConnected: !1,
        isConnecting: !1,
        isDisconnected: !0,
        isReconnecting: !1,
        status: i
      };
  }
}
function it(e, t) {
  if (e === t)
    return !0;
  if (e && t && typeof e == "object" && typeof t == "object") {
    if (e.constructor !== t.constructor)
      return !1;
    let n, r;
    if (Array.isArray(e) && Array.isArray(t)) {
      if (n = e.length, n !== t.length)
        return !1;
      for (r = n; r-- !== 0; )
        if (!it(e[r], t[r]))
          return !1;
      return !0;
    }
    if (e.valueOf !== Object.prototype.valueOf)
      return e.valueOf() === t.valueOf();
    if (e.toString !== Object.prototype.toString)
      return e.toString() === t.toString();
    const s = Object.keys(e);
    if (n = s.length, n !== Object.keys(t).length)
      return !1;
    for (r = n; r-- !== 0; )
      if (!Object.prototype.hasOwnProperty.call(t, s[r]))
        return !1;
    for (r = n; r-- !== 0; ) {
      const o = s[r];
      if (o && !it(e[o], t[o]))
        return !1;
    }
    return !0;
  }
  return e !== e && t !== t;
}
function To(e, t) {
  const { onChange: n } = t;
  return e.subscribe(() => Ao(e), n, {
    equalityFn(r, s) {
      const { connector: o, ...i } = r, { connector: a, ...l } = s;
      return it(i, l) && // check connector separately
      (o == null ? void 0 : o.id) === (a == null ? void 0 : a.id) && (o == null ? void 0 : o.uid) === (a == null ? void 0 : a.uid);
    }
  });
}
function So(e = {}) {
  const { onConnect: t, onDisconnect: n } = e, r = jn(e);
  qt(() => To(r, {
    onChange(s, o) {
      if ((o.status === "reconnecting" || o.status === "connecting") && s.status === "connected") {
        const { address: i, addresses: a, chain: l, chainId: d, connector: h } = s, u = o.status === "reconnecting" || // if `previousAccount.status` is `undefined`, the connector connected immediately.
        o.status === void 0;
        t == null || t({
          address: i,
          addresses: a,
          chain: l,
          chainId: d,
          connector: h,
          isReconnected: u
        });
      } else o.status === "connected" && s.status === "disconnected" && (n == null || n());
    }
  }), [r, t, n]);
}
const Lo = (e) => {
  const {
    getNonce: t,
    linkWallet: n,
    loginCallback: r,
    user: s,
    verifyNonce: o,
    isLoggedIn: i,
    errorWallet: a
  } = be(), { signMessageAsync: l, status: d } = Dn(), { disconnect: h } = Jn(), u = Kn(), f = async (x) => {
    console.log("Sign for Linking");
    const p = await t(), b = new wt({
      domain: window.location.host,
      address: x,
      statement: "Sign in to Bedrock Passport",
      uri: window.location.origin,
      version: "1",
      nonce: p == null ? void 0 : p.nonce,
      chainId: u
    }), y = await l({
      message: b.prepareMessage()
    }).catch(() => {
      throw new Error("LOGIN_SIGN_ERROR");
    }), v = await n(b, y);
    if (!v || !v.token)
      throw h(), new Error("LOGIN_VERIFY_ERROR");
    await r(
      v.token.accessToken,
      v.token.refreshToken
    );
  }, m = async (x) => {
    console.log("Sign After Login");
    const p = await t(), b = new wt({
      domain: window.location.host,
      address: x,
      statement: "Sign in to Bedrock Passport",
      uri: window.location.origin,
      version: "1",
      nonce: p == null ? void 0 : p.nonce,
      chainId: u
    }), y = await l({
      message: b.prepareMessage()
    }).catch(() => {
      throw new Error("LOGIN_SIGN_ERROR");
    }), v = await o(b, y);
    if (!v || !v.token)
      throw h(), new Error("LOGIN_VERIFY_ERROR");
    await r(
      v.token.accessToken,
      v.token.refreshToken
    );
  };
  return So({
    async onConnect(x) {
      var p, b;
      console.log("EFFECT_INIT_SIGN"), i && ((p = s == null ? void 0 : s.ethAddress) == null ? void 0 : p.toLowerCase()) !== ((b = x.address) == null ? void 0 : b.toLowerCase()) ? (console.log("EFFECT_INIT_SIGN_LINK"), await f(x.address).then(() => {
        const y = new CustomEvent("Bedrock_Wallet_Linked", {
          detail: { address: x.address }
        });
        document.dispatchEvent(y);
      }).catch((y) => {
        console.error("EFFECT_INIT_SIGN_LINK", { e: y }), h();
      })) : (console.log("EFFECT_INIT_SIGN_LOGIN"), i || await m(x.address).then(() => {
        const y = new CustomEvent("Bedrock_Wallet_Login", {
          detail: { address: x.address }
        });
        document.dispatchEvent(y);
      }).catch((y) => {
        console.error("EFFECT_INIT_SIGN_LOGIN", { e: y }), h();
      }));
    }
  }), /* @__PURE__ */ k(J, { children: [
    /* @__PURE__ */ c(Yr, { open: d === "pending" }),
    /* @__PURE__ */ k("div", { className: "grid grid-cols-1 gap-4", children: [
      /* @__PURE__ */ c(Wn.Custom, { children: ({ isConnected: x, show: p, truncatedAddress: b, isConnecting: y }) => /* @__PURE__ */ c(J, { children: /* @__PURE__ */ k(
        z,
        {
          onClick: p,
          variant: "outline",
          className: e.className,
          disabled: y,
          children: [
            /* @__PURE__ */ c(ue.wallet, {}),
            /* @__PURE__ */ c("span", { children: x ? b : s != null && s.ethAddress ? Lr(s.ethAddress) : e.connectText ?? "Connect" })
          ]
        }
      ) }) }),
      a && /* @__PURE__ */ c("div", { className: "text-red-600", children: a })
    ] })
  ] });
}, Ro = {
  enableWalletConnect: !0,
  enableEmailLogin: !0,
  enableGoogleLogin: !0,
  enableAppleLogin: !0,
  enableItemsDisplay: !0,
  enableCurrencyDisplay: !1,
  showProfileButton: !1,
  showLogoutButton: !0
}, Bo = {
  sm: "h-8 text-sm px-2",
  md: "h-10 text-base px-3",
  lg: "h-12 text-lg px-4"
}, _o = {
  default: `
    bg-white dark:bg-gray-800
    border border-gray-300 dark:border-gray-700
    focus:border-blue-500 dark:focus:border-blue-400
    focus:ring-blue-500/20 dark:focus:ring-blue-400/20
  `,
  filled: `
    bg-gray-100 dark:bg-gray-700
    border-transparent
    focus:bg-white dark:focus:bg-gray-800
    focus:border-blue-500 dark:focus:border-blue-400
    focus:ring-blue-500/20 dark:focus:ring-blue-400/20
  `,
  outline: `
    bg-transparent
    border border-gray-300 dark:border-gray-600
    focus:border-blue-500 dark:focus:border-blue-400
    focus:ring-blue-500/20 dark:focus:ring-blue-400/20
  `
}, re = S.forwardRef(
  ({
    className: e,
    error: t,
    label: n,
    leftIcon: r,
    rightIcon: s,
    variant: o = "default",
    inputSize: i = "md",
    type: a = "text",
    disabled: l,
    ...d
  }, h) => {
    const u = S.useId();
    return /* @__PURE__ */ k("div", { className: "w-full", children: [
      n && /* @__PURE__ */ c(
        "label",
        {
          htmlFor: u,
          className: g(
            "block text-sm font-medium mb-1.5",
            l && "opacity-50",
            t ? "text-red-500" : "text-gray-700 dark:text-gray-200"
          ),
          children: n
        }
      ),
      /* @__PURE__ */ k("div", { className: "relative", children: [
        r && /* @__PURE__ */ c("div", { className: "absolute left-3 top-1/2 -translate-y-1/2 text-gray-500 dark:text-gray-400", children: r }),
        /* @__PURE__ */ c(
          "input",
          {
            id: u,
            type: a,
            disabled: l,
            ref: h,
            className: g(
              // Base styles
              "w-full rounded-md transition-colors",
              "placeholder:text-gray-500 dark:placeholder:text-gray-400",
              "focus:outline-none focus:ring-2",
              "disabled:cursor-not-allowed disabled:opacity-50",
              // Variant styles
              _o[o],
              // Size styles
              Bo[i],
              // Icon padding
              r && "pl-10",
              s && "pr-10",
              // Error styles
              t && "border-red-500 focus:border-red-500 focus:ring-red-500/20",
              e
            ),
            ...d
          }
        ),
        s && /* @__PURE__ */ c("div", { className: "absolute right-3 top-1/2 -translate-y-1/2 text-gray-500 dark:text-gray-400", children: s })
      ] }),
      t && /* @__PURE__ */ c("p", { className: "mt-1.5 text-sm text-red-500", children: t })
    ] });
  }
);
re.displayName = "Input";
const zo = (e) => {
  const [t, n] = _(""), [r, s] = _(""), { signIn: o, loginCallback: i } = be(), [a, l] = _(""), d = async (u) => {
    u.preventDefault(), l("");
    try {
      const f = await o(te.EMAIL, { email: t, password: r });
      if (console.log("EMAIL LOGIN", {
        res: f
      }), !f || !f.token) {
        l("Invalid email or password");
        return;
      }
      const { accessToken: m, refreshToken: x } = f.token;
      await i(m, x);
    } catch (f) {
      console.error("Login failed:", { error: f }), l(
        f instanceof Error ? f.message : "Login failed. Please try again."
      );
    }
  };
  return /* @__PURE__ */ k("form", { onSubmit: async (u) => {
    u.preventDefault(), await d(u);
  }, className: g("space-y-4", e.formClass), children: [
    a && /* @__PURE__ */ c("div", { className: g("text-red-500", e.errorClass), children: a }),
    /* @__PURE__ */ k("div", { className: "space-y-2", children: [
      /* @__PURE__ */ c(
        re,
        {
          type: "email",
          placeholder: "Email",
          value: t,
          onChange: (u) => n(u.target.value),
          className: g(e.inputClass),
          required: !0
        }
      ),
      /* @__PURE__ */ c(
        re,
        {
          type: "password",
          placeholder: "Password",
          value: r,
          onChange: (u) => s(u.target.value),
          className: g(e.inputClass),
          required: !0
        }
      )
    ] }),
    /* @__PURE__ */ c("div", { className: "flex gap-2", children: /* @__PURE__ */ c(
      z,
      {
        type: "submit",
        variant: "outline",
        className: g(e.buttonClass),
        children: "Sign In"
      }
    ) })
  ] });
}, Oo = (e) => {
  const [t, n] = _(""), [r, s] = _(""), [o, i] = _(""), { registerEmail: a, loginCallback: l } = be(), [d, h] = _(""), u = async (m) => {
    m.preventDefault(), h("");
    const x = /^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{8,}$/;
    if (!r.match(x)) {
      h(
        "Password must have at least 8 characters and contain at least one uppercase letter, one lowercase letter, one number and one special characters"
      );
      return;
    }
    if (r !== o) {
      h("Password does not match");
      return;
    }
    try {
      const p = await a(t, r, o);
      if (!p || !p.token) {
        h(
          "It seems like the email is already registered. Please continue with reset passwor process if you still having problem"
        );
        return;
      }
      const { accessToken: b, refreshToken: y } = p.token;
      await l(b, y);
    } catch (p) {
      console.error("Login failed:", p), h(
        p instanceof Error ? p.message : "Login failed. Please try again."
      );
    }
  };
  return /* @__PURE__ */ k("form", { onSubmit: async (m) => {
    m.preventDefault(), await u(m);
  }, className: g("space-y-4", e.formClass), children: [
    d && /* @__PURE__ */ c("div", { className: g("text-red-500", e.errorClass), children: d }),
    /* @__PURE__ */ k("div", { className: "space-y-2", children: [
      /* @__PURE__ */ c(
        re,
        {
          type: "email",
          placeholder: "Email",
          value: t,
          onChange: (m) => n(m.target.value),
          className: g(e.inputClass),
          required: !0
        }
      ),
      /* @__PURE__ */ c(
        re,
        {
          type: "password",
          placeholder: "Password",
          value: r,
          onChange: (m) => s(m.target.value),
          className: g(e.inputClass),
          required: !0
        }
      ),
      /* @__PURE__ */ c(
        re,
        {
          type: "password",
          placeholder: "Password Confirmation",
          value: o,
          onChange: (m) => i(m.target.value),
          className: g(e.inputClass),
          required: !0
        }
      )
    ] }),
    /* @__PURE__ */ c("div", { className: "flex gap-2", children: /* @__PURE__ */ c(
      z,
      {
        type: "submit",
        variant: "outline",
        className: g(e.buttonClass),
        children: "Register"
      }
    ) })
  ] });
}, Uo = (e) => {
  const [t, n] = _(""), { getTokenReset: r } = be(), [s, o] = _(""), [i, a] = _(""), l = async () => {
    if (o(""), !t) {
      o("Please enter an email address");
      return;
    }
    if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(t)) {
      o("Please enter a valid email address");
      return;
    }
    try {
      a(""), console.log("requestToken", { email: t });
      const h = await r(t);
      console.log("getTokenReset", { res: h }), a("Please check your email to continue");
    } catch (h) {
      console.error("Request failed:", h), o(
        "Please check if the email is correct. If the problem persists, please contact support."
      );
    }
  };
  return /* @__PURE__ */ k("div", { className: g("space-y-4", e.formClass), children: [
    s && /* @__PURE__ */ c("div", { className: g("text-red-500", e.errorClass), children: s }),
    i && /* @__PURE__ */ c("div", { className: g("text-green-500", e.successClass), children: i }),
    /* @__PURE__ */ k("div", { className: "space-y-2", children: [
      /* @__PURE__ */ c(
        re,
        {
          type: "email",
          placeholder: "email",
          value: t,
          onChange: (d) => n(d.target.value),
          className: g(e.separatorClass, ""),
          required: !0
        }
      ),
      /* @__PURE__ */ c(
        z,
        {
          type: "button",
          variant: "outline",
          className: g(e.buttonClass),
          onClick: l,
          children: "Recover"
        }
      )
    ] })
  ] });
}, Go = () => {
  var n;
  const {
    currency: e
  } = be();
  let t;
  return e && (t = (n = e == null ? void 0 : e.Items) == null ? void 0 : n.map((r) => /* @__PURE__ */ c("li", { children: /* @__PURE__ */ k("p", { children: [
    "Bedrock Points: ",
    r.Amount
  ] }) }))), /* @__PURE__ */ c("div", { children: /* @__PURE__ */ c("div", { children: /* @__PURE__ */ c("ul", { children: t }) }) });
}, Ai = ({ features: e, ...t }) => {
  const n = { ...Ro, ...e }, {
    signIn: r,
    user: s,
    linkSocial: o,
    widgetText: i,
    widgetUrl: a,
    signOut: l,
    linkProfile: d,
    isLoggedIn: h
  } = be(), [u, f] = _(!1), [m, x] = _(!1), [p, b] = _(!1), y = () => {
    s != null && s.ethAddress ? o(te.GOOGLE) : r(te.GOOGLE);
  }, v = () => {
    s != null && s.ethAddress ? o(te.APPLE) : r(te.APPLE);
  };
  return !n.enableAppleLogin && !n.enableGoogleLogin && !n.enableEmailLogin && !n.enableWalletConnect ? /* @__PURE__ */ k(Ze, { className: g("min-w-60", t.panelClass), children: [
    /* @__PURE__ */ c(Qe, { children: /* @__PURE__ */ k("div", { className: g("flex items-center", t.headerClass), children: [
      /* @__PURE__ */ c(et, { className: g(t.titleClass), children: t.title ?? "Sign In to" }),
      t.logo && /* @__PURE__ */ c(
        "img",
        {
          src: t.logo,
          alt: t.logoAlt,
          className: g(t.logoClass)
        }
      )
    ] }) }),
    /* @__PURE__ */ c(tt, { className: "grid gap-4", children: "You will need to enable at least one login method" })
  ] }) : /* @__PURE__ */ k(Ze, { className: g("min-w-60", t.panelClass), children: [
    /* @__PURE__ */ c(Qe, { children: /* @__PURE__ */ k("div", { className: g("flex items-center", t.headerClass), children: [
      /* @__PURE__ */ c(et, { className: g(t.titleClass), children: t.title ?? "Sign In to" }),
      t.logo && /* @__PURE__ */ c(
        "img",
        {
          src: t.logo,
          alt: t.logoAlt,
          className: g(t.logoClass)
        }
      )
    ] }) }),
    /* @__PURE__ */ k(tt, { className: "grid gap-4", children: [
      s != null && s.email ? /* @__PURE__ */ c(J, { children: /* @__PURE__ */ k("div", { className: "flex flex-row gap-4 justify-center items-center", children: [
        s.provider === te.APPLE ? /* @__PURE__ */ c(
          z,
          {
            variant: "outline",
            className: g(t.appleButtonClass),
            disabled: !0,
            children: /* @__PURE__ */ c(ue.apple, {})
          }
        ) : /* @__PURE__ */ c(
          z,
          {
            variant: "outline",
            className: g(t.googleButtonClass),
            disabled: !0,
            children: /* @__PURE__ */ c(ue.google, {})
          }
        ),
        /* @__PURE__ */ c("div", { children: s == null ? void 0 : s.email })
      ] }) }) : !u && !m && !p ? /* @__PURE__ */ k("div", { className: "flex flex-col gap-4", children: [
        /* @__PURE__ */ c(
          "h4",
          {
            className: g(
              "text-white text-center font-bold text-sm",
              t.authTitleClass
            ),
            children: t.authTitle ?? "Continue with"
          }
        ),
        /* @__PURE__ */ k("div", { className: "grid auto-cols-fr grid-flow-col gap-2 ", children: [
          n.enableGoogleLogin && /* @__PURE__ */ c(
            z,
            {
              variant: "outline",
              className: g(t.buttonClass, t.googleButtonClass),
              onClick: () => y(),
              children: /* @__PURE__ */ c(ue.google, {})
            }
          ),
          n.enableAppleLogin && /* @__PURE__ */ c(
            z,
            {
              variant: "outline",
              className: g(t.buttonClass, t.appleButtonClass),
              onClick: () => v(),
              children: /* @__PURE__ */ c(ue.apple, {})
            }
          ),
          n.enableEmailLogin && /* @__PURE__ */ c(
            z,
            {
              variant: "outline",
              className: g(t.buttonClass, t.emailButtonClass),
              onClick: () => f(!0),
              children: /* @__PURE__ */ c(ue.email, {})
            }
          )
        ] })
      ] }) : /* @__PURE__ */ k(J, { children: [
        m && /* @__PURE__ */ c(
          Oo,
          {
            buttonClass: t.buttonClass,
            inputClass: t.inputClass,
            successClass: t.successClass,
            errorClass: t.errorClass,
            formClass: t.formClass
          }
        ),
        u && /* @__PURE__ */ c(
          zo,
          {
            buttonClass: t.buttonClass,
            inputClass: t.inputClass,
            successClass: t.successClass,
            errorClass: t.errorClass,
            formClass: t.formClass
          }
        ),
        p && /* @__PURE__ */ c(
          Uo,
          {
            buttonClass: t.buttonClass,
            separatorClass: t.separatorTextClass,
            inputClass: t.inputClass,
            successClass: t.successClass,
            errorClass: t.errorClass,
            formClass: t.formClass
          }
        )
      ] }),
      u || m || p ? /* @__PURE__ */ k(J, { children: [
        /* @__PURE__ */ k("div", { className: "relative", children: [
          /* @__PURE__ */ c(
            rt,
            {
              className: g("my-4", "bg-white", t.separatorClass),
              orientation: "horizontal"
            }
          ),
          !h && /* @__PURE__ */ c(
            "span",
            {
              className: g(
                "absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 flex justify-center items-center py-1 px-2",
                "bg-black",
                t.separatorTextClass
              ),
              children: t.separatorText ?? "or"
            }
          )
        ] }),
        /* @__PURE__ */ k("div", { className: "flex items-center justify-center w-full gap-2", children: [
          /* @__PURE__ */ c(
            z,
            {
              type: "button",
              variant: "outline",
              className: g(t.buttonClass),
              onClick: () => {
                f(!1), x(!1), b(!1);
              },
              children: "Back"
            }
          ),
          /* @__PURE__ */ c(
            z,
            {
              type: "button",
              variant: "outline",
              className: g(t.buttonClass),
              onClick: () => {
                if (p) {
                  f(!1), x(!0), b(!1);
                  return;
                }
                f(!u), x(!m);
              },
              children: m ? "Sign In" : "Register"
            }
          ),
          !p && /* @__PURE__ */ c(
            z,
            {
              type: "button",
              variant: "outline",
              className: g(t.buttonClass),
              onClick: () => {
                f(!1), x(!1), b(!0);
              },
              children: "Reset"
            }
          )
        ] })
      ] }) : /* @__PURE__ */ c(J, { children: n.enableWalletConnect && /* @__PURE__ */ k(J, { children: [
        (n.enableAppleLogin || n.enableGoogleLogin || n.enableEmailLogin) && /* @__PURE__ */ k("div", { className: "relative", children: [
          /* @__PURE__ */ c(
            rt,
            {
              className: g("my-4", "bg-white", t.separatorClass),
              orientation: "horizontal"
            }
          ),
          !h && /* @__PURE__ */ c(
            "span",
            {
              className: g(
                "absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 flex justify-center items-center py-1 px-2",
                "bg-black",
                t.separatorTextClass
              ),
              children: t.separatorText ?? "or"
            }
          )
        ] }),
        /* @__PURE__ */ c(
          "div",
          {
            className: g(
              "flex items-center justify-center w-full",
              t.walletRowClass
            ),
            children: /* @__PURE__ */ c(
              Lo,
              {
                className: g(t.walletButtonClass ?? t.buttonClass),
                connectText: t.walletButtonText
              }
            )
          }
        )
      ] }) }),
      h && /* @__PURE__ */ k(J, { children: [
        /* @__PURE__ */ k(
          "div",
          {
            className: g(
              "flex justify-start items-center w-full gap-2",
              t.linkRowClass
            ),
            children: [
              n.showProfileButton && /* @__PURE__ */ c(
                z,
                {
                  variant: "outline",
                  className: g(t.buttonClass, t.profileButtonClass),
                  onClick: d,
                  children: "Profile"
                }
              ),
              n.showLogoutButton && /* @__PURE__ */ c(
                z,
                {
                  variant: "outline",
                  onClick: l,
                  className: g(t.buttonClass, t.logoutButtonClass),
                  children: "Logout"
                }
              )
            ]
          }
        ),
        n.enableCurrencyDisplay && /* @__PURE__ */ c(
          "div",
          {
            className: g(
              "flex justify-start items-center w-full gap-2",
              t.linkRowClass
            ),
            children: /* @__PURE__ */ c(Go, {})
          }
        )
      ] })
    ] }),
    /* @__PURE__ */ c(sn, { className: "flex justify-center", children: /* @__PURE__ */ c("a", { href: a, rel: "noreferrer nofollow", target: "_blank", children: /* @__PURE__ */ c("h4", { className: "text-white text-center font-bold text-sm", children: i }) }) })
  ] });
}, Fo = (e, t, n, r, s) => `${e}/api/v1/auth/${t}?state=${n}`, $o = (e, t, n, r, s) => `${e}/api/v1/auth/identifier/${t}?state=${n}`;
function xt(e, t) {
  let n;
  try {
    n = e();
  } catch {
    return;
  }
  return {
    getItem: (s) => {
      var o;
      const i = (l) => l === null ? null : JSON.parse(l, void 0), a = (o = n.getItem(s)) != null ? o : null;
      return a instanceof Promise ? a.then(i) : i(a);
    },
    setItem: (s, o) => n.setItem(
      s,
      JSON.stringify(o, void 0)
    ),
    removeItem: (s) => n.removeItem(s)
  };
}
const at = (e) => (t) => {
  try {
    const n = e(t);
    return n instanceof Promise ? n : {
      then(r) {
        return at(r)(n);
      },
      catch(r) {
        return this;
      }
    };
  } catch (n) {
    return {
      then(r) {
        return this;
      },
      catch(r) {
        return at(r)(n);
      }
    };
  }
}, Mo = (e, t) => (n, r, s) => {
  let o = {
    storage: xt(() => localStorage),
    partialize: (p) => p,
    version: 0,
    merge: (p, b) => ({
      ...b,
      ...p
    }),
    ...t
  }, i = !1;
  const a = /* @__PURE__ */ new Set(), l = /* @__PURE__ */ new Set();
  let d = o.storage;
  if (!d)
    return e(
      (...p) => {
        console.warn(
          `[zustand persist middleware] Unable to update item '${o.name}', the given storage is currently unavailable.`
        ), n(...p);
      },
      r,
      s
    );
  const h = () => {
    const p = o.partialize({ ...r() });
    return d.setItem(o.name, {
      state: p,
      version: o.version
    });
  }, u = s.setState;
  s.setState = (p, b) => {
    u(p, b), h();
  };
  const f = e(
    (...p) => {
      n(...p), h();
    },
    r,
    s
  );
  s.getInitialState = () => f;
  let m;
  const x = () => {
    var p, b;
    if (!d) return;
    i = !1, a.forEach((v) => {
      var N;
      return v((N = r()) != null ? N : f);
    });
    const y = ((b = o.onRehydrateStorage) == null ? void 0 : b.call(o, (p = r()) != null ? p : f)) || void 0;
    return at(d.getItem.bind(d))(o.name).then((v) => {
      if (v)
        if (typeof v.version == "number" && v.version !== o.version) {
          if (o.migrate) {
            const N = o.migrate(
              v.state,
              v.version
            );
            return N instanceof Promise ? N.then((B) => [!0, B]) : [!0, N];
          }
          console.error(
            "State loaded from storage couldn't be migrated since no migrate function was provided"
          );
        } else
          return [!1, v.state];
      return [!1, void 0];
    }).then((v) => {
      var N;
      const [B, U] = v;
      if (m = o.merge(
        U,
        (N = r()) != null ? N : f
      ), n(m, !0), B)
        return h();
    }).then(() => {
      y == null || y(m, void 0), m = r(), i = !0, l.forEach((v) => v(m));
    }).catch((v) => {
      y == null || y(void 0, v);
    });
  };
  return s.persist = {
    setOptions: (p) => {
      o = {
        ...o,
        ...p
      }, p.storage && (d = p.storage);
    },
    clearStorage: () => {
      d == null || d.removeItem(o.name);
    },
    getOptions: () => o,
    rehydrate: () => x(),
    hasHydrated: () => i,
    onHydrate: (p) => (a.add(p), () => {
      a.delete(p);
    }),
    onFinishHydration: (p) => (l.add(p), () => {
      l.delete(p);
    })
  }, o.skipHydration || x(), m || f;
}, Gn = Mo;
Yt()(
  Gn(
    (e, t) => ({
      user: void 0,
      setUser: (n) => e({ user: n }),
      getUser: () => t().user,
      deleteUser: () => e({ user: void 0 })
    }),
    {
      name: "passport-user",
      storage: xt(() => localStorage),
      partialize: (e) => ({ user: e.user })
    }
  )
);
const Wo = Yt()(
  Gn(
    (e, t) => ({
      accessToken: void 0,
      refreshToken: void 0,
      setAccessToken: (n) => e({ accessToken: n }),
      setRefreshToken: (n) => e({ refreshToken: n }),
      getAccessToken: () => t().accessToken,
      getRefreshToken: () => t().refreshToken,
      deleteTokens: () => e({ accessToken: void 0, refreshToken: void 0 })
    }),
    {
      name: "passport-token",
      storage: xt(() => localStorage),
      partialize: (e) => ({
        accessToken: e.accessToken,
        refreshToken: e.refreshToken
      })
    }
  )
), Ho = () => {
  const {
    setRefreshToken: e,
    setAccessToken: t,
    getAccessToken: n,
    getRefreshToken: r,
    deleteTokens: s
  } = Wo();
  return {
    login: async (d, h) => {
      if (!d) {
        console.error("[passport.login]: Access token is empty");
        return;
      }
      if (!h) {
        console.error("[passport.login]: Refresh token is empty");
        return;
      }
      t(d), e(h);
    },
    accessToken: n,
    refreshToken: r,
    setAccessToken: (d) => {
      t(d);
    },
    setRefreshToken: (d) => {
      e(d);
    },
    logout: () => {
      s();
    }
  };
}, Vo = {
  gasPriceOracle: { address: "0x420000000000000000000000000000000000000F" },
  l1Block: { address: "0x4200000000000000000000000000000000000015" },
  l2CrossDomainMessenger: {
    address: "0x4200000000000000000000000000000000000007"
  },
  l2Erc721Bridge: { address: "0x4200000000000000000000000000000000000014" },
  l2StandardBridge: { address: "0x4200000000000000000000000000000000000010" },
  l2ToL1MessagePasser: {
    address: "0x4200000000000000000000000000000000000016"
  }
}, jo = {
  block: /* @__PURE__ */ qs({
    format(e) {
      var n;
      return {
        transactions: (n = e.transactions) == null ? void 0 : n.map((r) => {
          if (typeof r == "string")
            return r;
          const s = gt(r);
          return s.typeHex === "0x7e" && (s.isSystemTx = r.isSystemTx, s.mint = r.mint ? fe(r.mint) : void 0, s.sourceHash = r.sourceHash, s.type = "deposit"), s;
        }),
        stateRoot: e.stateRoot
      };
    }
  }),
  transaction: /* @__PURE__ */ Ds({
    format(e) {
      const t = {};
      return e.type === "0x7e" && (t.isSystemTx = e.isSystemTx, t.mint = e.mint ? fe(e.mint) : void 0, t.sourceHash = e.sourceHash, t.type = "deposit"), t;
    }
  }),
  transactionReceipt: /* @__PURE__ */ go({
    format(e) {
      return {
        l1GasPrice: e.l1GasPrice ? fe(e.l1GasPrice) : null,
        l1GasUsed: e.l1GasUsed ? fe(e.l1GasUsed) : null,
        l1Fee: e.l1Fee ? fe(e.l1Fee) : null,
        l1FeeScalar: e.l1FeeScalar ? Number(e.l1FeeScalar) : null
      };
    }
  })
};
function Do(e, t) {
  return qo(e) ? Ko(e) : vo(e, t);
}
const Jo = {
  transaction: Do
};
function Ko(e) {
  Yo(e);
  const { sourceHash: t, data: n, from: r, gas: s, isSystemTx: o, mint: i, to: a, value: l } = e, d = [
    t,
    r,
    a ?? "0x",
    i ? I(i) : "0x",
    l ? I(l) : "0x",
    s ? I(s) : "0x",
    o ? "0x1" : "0x",
    n ?? "0x"
  ];
  return Re([
    "0x7e",
    ae(d)
  ]);
}
function qo(e) {
  return e.type === "deposit" || typeof e.sourceHash < "u";
}
function Yo(e) {
  const { from: t, to: n } = e;
  if (t && !ie(t))
    throw new oe({ address: t });
  if (n && !ie(n))
    throw new oe({ address: n });
}
const He = {
  contracts: Vo,
  formatters: jo,
  serializers: Jo
}, Xo = 42161, Gt = /* @__PURE__ */ V({
  id: 33139,
  name: "Ape Chain",
  nativeCurrency: {
    name: "ApeCoin",
    symbol: "APE",
    decimals: 18
  },
  rpcUrls: {
    default: {
      http: ["https://rpc.apechain.com/http"],
      webSocket: ["wss://rpc.apechain.com/ws"]
    }
  },
  blockExplorers: {
    default: {
      name: "Apescan",
      url: "https://apescan.io",
      apiUrl: "https://api.apescan.io/api"
    }
  },
  contracts: {
    multicall3: {
      address: "0xcA11bde05977b3631167028862bE2a173976CA11",
      blockCreated: 20889
    }
  },
  sourceId: Xo
}), Ft = /* @__PURE__ */ V({
  id: 42161,
  name: "Arbitrum One",
  nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
  rpcUrls: {
    default: {
      http: ["https://arb1.arbitrum.io/rpc"]
    }
  },
  blockExplorers: {
    default: {
      name: "Arbiscan",
      url: "https://arbiscan.io",
      apiUrl: "https://api.arbiscan.io/api"
    }
  },
  contracts: {
    multicall3: {
      address: "0xca11bde05977b3631167028862be2a173976ca11",
      blockCreated: 7654707
    }
  }
}), $t = /* @__PURE__ */ V({
  id: 43114,
  name: "Avalanche",
  nativeCurrency: {
    decimals: 18,
    name: "Avalanche",
    symbol: "AVAX"
  },
  rpcUrls: {
    default: { http: ["https://api.avax.network/ext/bc/C/rpc"] }
  },
  blockExplorers: {
    default: {
      name: "SnowTrace",
      url: "https://snowtrace.io",
      apiUrl: "https://api.snowtrace.io"
    }
  },
  contracts: {
    multicall3: {
      address: "0xca11bde05977b3631167028862be2a173976ca11",
      blockCreated: 11907934
    }
  }
}), Te = 1, Mt = /* @__PURE__ */ V({
  ...He,
  id: 8453,
  name: "Base",
  nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
  rpcUrls: {
    default: {
      http: ["https://mainnet.base.org"]
    }
  },
  blockExplorers: {
    default: {
      name: "Basescan",
      url: "https://basescan.org",
      apiUrl: "https://api.basescan.org/api"
    }
  },
  contracts: {
    ...He.contracts,
    disputeGameFactory: {
      [Te]: {
        address: "0x43edB88C4B80fDD2AdFF2412A7BebF9dF42cB40e"
      }
    },
    l2OutputOracle: {
      [Te]: {
        address: "0x56315b90c40730925ec5485cf004d835058518A0"
      }
    },
    multicall3: {
      address: "0xca11bde05977b3631167028862be2a173976ca11",
      blockCreated: 5022
    },
    portal: {
      [Te]: {
        address: "0x49048044D57e1C92A77f79988d21Fa8fAF74E97e",
        blockCreated: 17482143
      }
    },
    l1StandardBridge: {
      [Te]: {
        address: "0x3154Cf16ccdb4C6d922629664174b904d80F2C35",
        blockCreated: 17482143
      }
    }
  },
  sourceId: Te
}), Wt = /* @__PURE__ */ V({
  id: 56,
  name: "BNB Smart Chain",
  nativeCurrency: {
    decimals: 18,
    name: "BNB",
    symbol: "BNB"
  },
  rpcUrls: {
    default: { http: ["https://56.rpc.thirdweb.com"] }
  },
  blockExplorers: {
    default: {
      name: "BscScan",
      url: "https://bscscan.com",
      apiUrl: "https://api.bscscan.com/api"
    }
  },
  contracts: {
    multicall3: {
      address: "0xca11bde05977b3631167028862be2a173976ca11",
      blockCreated: 15921452
    }
  }
}), Ht = /* @__PURE__ */ V({
  id: 250,
  name: "Fantom",
  nativeCurrency: {
    decimals: 18,
    name: "Fantom",
    symbol: "FTM"
  },
  rpcUrls: {
    default: { http: ["https://250.rpc.thirdweb.com"] }
  },
  blockExplorers: {
    default: {
      name: "FTMScan",
      url: "https://ftmscan.com",
      apiUrl: "https://api.ftmscan.com/api"
    }
  },
  contracts: {
    multicall3: {
      address: "0xca11bde05977b3631167028862be2a173976ca11",
      blockCreated: 33001987
    }
  }
}), Vt = /* @__PURE__ */ V({
  id: 1,
  name: "Ethereum",
  nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
  rpcUrls: {
    default: {
      http: ["https://eth.merkle.io"]
    }
  },
  blockExplorers: {
    default: {
      name: "Etherscan",
      url: "https://etherscan.io",
      apiUrl: "https://api.etherscan.io/api"
    }
  },
  contracts: {
    ensRegistry: {
      address: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e"
    },
    ensUniversalResolver: {
      address: "0xce01f8eee7E479C928F8919abD53E553a36CeF67",
      blockCreated: 19258213
    },
    multicall3: {
      address: "0xca11bde05977b3631167028862be2a173976ca11",
      blockCreated: 14353601
    }
  }
}), Se = 1, jt = /* @__PURE__ */ V({
  ...He,
  id: 10,
  name: "OP Mainnet",
  nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
  rpcUrls: {
    default: {
      http: ["https://mainnet.optimism.io"]
    }
  },
  blockExplorers: {
    default: {
      name: "Optimism Explorer",
      url: "https://optimistic.etherscan.io",
      apiUrl: "https://api-optimistic.etherscan.io/api"
    }
  },
  contracts: {
    ...He.contracts,
    disputeGameFactory: {
      [Se]: {
        address: "0xe5965Ab5962eDc7477C8520243A95517CD252fA9"
      }
    },
    l2OutputOracle: {
      [Se]: {
        address: "0xdfe97868233d1aa22e815a266982f2cf17685a27"
      }
    },
    multicall3: {
      address: "0xca11bde05977b3631167028862be2a173976ca11",
      blockCreated: 4286263
    },
    portal: {
      [Se]: {
        address: "0xbEb5Fc579115071764c7423A4f12eDde41f106Ed"
      }
    },
    l1StandardBridge: {
      [Se]: {
        address: "0x99C9fc46f92E8a1c0deC1b1747d010903E884bE1"
      }
    }
  },
  sourceId: Se
}), Dt = /* @__PURE__ */ V({
  id: 137,
  name: "Polygon",
  nativeCurrency: { name: "POL", symbol: "POL", decimals: 18 },
  rpcUrls: {
    default: {
      http: ["https://polygon-rpc.com"]
    }
  },
  blockExplorers: {
    default: {
      name: "PolygonScan",
      url: "https://polygonscan.com",
      apiUrl: "https://api.polygonscan.com/api"
    }
  },
  contracts: {
    multicall3: {
      address: "0xca11bde05977b3631167028862be2a173976ca11",
      blockCreated: 25770160
    }
  }
}), Jt = /* @__PURE__ */ V({
  id: 728126428,
  name: "Tron",
  nativeCurrency: { name: "TRON", symbol: "TRX", decimals: 6 },
  rpcUrls: {
    default: {
      http: ["https://api.trongrid.io/jsonrpc"]
    }
  },
  blockExplorers: {
    default: {
      name: "Tronscan",
      url: "https://tronscan.org",
      apiUrl: "https://apilist.tronscanapi.com/api"
    }
  }
}), Kt = {
  id: 987,
  name: "Orange Testnet L1 Testnet",
  nativeCurrency: { name: "Juice", symbol: "JUICE", decimals: 18 },
  rpcUrls: {
    default: { http: ["https://subnets.avax.network/orangetest/testnet/rpc"] }
  },
  blockExplorers: {
    default: {
      name: "AvaScan",
      url: "https://subnets-test.avax.network/orangetest"
    }
  }
}, Zo = new Xn(), Qo = ({ ...e }) => {
  const t = qn(
    Hn({
      chains: [
        Vt,
        $t,
        Ft,
        Mt,
        Wt,
        Ht,
        Jt,
        Gt,
        jt,
        Dt,
        Kt
      ],
      transports: {
        [Vt.id]: $(),
        [$t.id]: $(),
        [Ft.id]: $(),
        [Mt.id]: $(),
        [Wt.id]: $(),
        [Ht.id]: $(),
        [Jt.id]: $(),
        [Gt.id]: $(),
        [jt.id]: $(),
        [Dt.id]: $(),
        [Kt.id]: $()
      },
      // Required API Keys
      walletConnectProjectId: e.walletConnectProjectId,
      appName: e.appName,
      // Optional App Info
      appDescription: e.appDescription ?? "",
      appUrl: e.appUrl ?? "",
      appIcon: e.appIcon ?? ""
    })
  );
  return /* @__PURE__ */ c(Yn, { config: t, children: /* @__PURE__ */ c(Zn, { client: Zo, children: /* @__PURE__ */ c(
    Vn,
    {
      options: {
        initialChainId: e.defaultChainId ?? 1,
        enforceSupportedChains: !0
      },
      children: e.children
    }
  ) }) });
};
new TextEncoder();
const Fn = new TextDecoder(), ei = (e) => {
  const t = atob(e), n = new Uint8Array(t.length);
  for (let r = 0; r < t.length; r++)
    n[r] = t.charCodeAt(r);
  return n;
}, ti = (e) => {
  let t = e;
  t instanceof Uint8Array && (t = Fn.decode(t)), t = t.replace(/-/g, "+").replace(/_/g, "/").replace(/\s/g, "");
  try {
    return ei(t);
  } catch {
    throw new TypeError("The input to be decoded is not correctly encoded.");
  }
};
class O extends Error {
  constructor(t, n) {
    var r;
    super(t, n), this.code = "ERR_JOSE_GENERIC", this.name = this.constructor.name, (r = Error.captureStackTrace) == null || r.call(Error, this, this.constructor);
  }
}
O.code = "ERR_JOSE_GENERIC";
class ni extends O {
  constructor(t, n, r = "unspecified", s = "unspecified") {
    super(t, { cause: { claim: r, reason: s, payload: n } }), this.code = "ERR_JWT_CLAIM_VALIDATION_FAILED", this.claim = r, this.reason = s, this.payload = n;
  }
}
ni.code = "ERR_JWT_CLAIM_VALIDATION_FAILED";
class ri extends O {
  constructor(t, n, r = "unspecified", s = "unspecified") {
    super(t, { cause: { claim: r, reason: s, payload: n } }), this.code = "ERR_JWT_EXPIRED", this.claim = r, this.reason = s, this.payload = n;
  }
}
ri.code = "ERR_JWT_EXPIRED";
class si extends O {
  constructor() {
    super(...arguments), this.code = "ERR_JOSE_ALG_NOT_ALLOWED";
  }
}
si.code = "ERR_JOSE_ALG_NOT_ALLOWED";
class oi extends O {
  constructor() {
    super(...arguments), this.code = "ERR_JOSE_NOT_SUPPORTED";
  }
}
oi.code = "ERR_JOSE_NOT_SUPPORTED";
class ii extends O {
  constructor(t = "decryption operation failed", n) {
    super(t, n), this.code = "ERR_JWE_DECRYPTION_FAILED";
  }
}
ii.code = "ERR_JWE_DECRYPTION_FAILED";
class ai extends O {
  constructor() {
    super(...arguments), this.code = "ERR_JWE_INVALID";
  }
}
ai.code = "ERR_JWE_INVALID";
class ci extends O {
  constructor() {
    super(...arguments), this.code = "ERR_JWS_INVALID";
  }
}
ci.code = "ERR_JWS_INVALID";
class ee extends O {
  constructor() {
    super(...arguments), this.code = "ERR_JWT_INVALID";
  }
}
ee.code = "ERR_JWT_INVALID";
class li extends O {
  constructor() {
    super(...arguments), this.code = "ERR_JWK_INVALID";
  }
}
li.code = "ERR_JWK_INVALID";
class di extends O {
  constructor() {
    super(...arguments), this.code = "ERR_JWKS_INVALID";
  }
}
di.code = "ERR_JWKS_INVALID";
class ui extends O {
  constructor(t = "no applicable key found in the JSON Web Key Set", n) {
    super(t, n), this.code = "ERR_JWKS_NO_MATCHING_KEY";
  }
}
ui.code = "ERR_JWKS_NO_MATCHING_KEY";
class fi extends O {
  constructor(t = "multiple matching keys found in the JSON Web Key Set", n) {
    super(t, n), this.code = "ERR_JWKS_MULTIPLE_MATCHING_KEYS";
  }
}
fi.code = "ERR_JWKS_MULTIPLE_MATCHING_KEYS";
class hi extends O {
  constructor(t = "request timed out", n) {
    super(t, n), this.code = "ERR_JWKS_TIMEOUT";
  }
}
hi.code = "ERR_JWKS_TIMEOUT";
class pi extends O {
  constructor(t = "signature verification failed", n) {
    super(t, n), this.code = "ERR_JWS_SIGNATURE_VERIFICATION_FAILED";
  }
}
pi.code = "ERR_JWS_SIGNATURE_VERIFICATION_FAILED";
function mi(e) {
  return typeof e == "object" && e !== null;
}
function gi(e) {
  if (!mi(e) || Object.prototype.toString.call(e) !== "[object Object]")
    return !1;
  if (Object.getPrototypeOf(e) === null)
    return !0;
  let t = e;
  for (; Object.getPrototypeOf(t) !== null; )
    t = Object.getPrototypeOf(t);
  return Object.getPrototypeOf(e) === t;
}
const bi = ti;
function yi(e) {
  if (typeof e != "string")
    throw new ee("JWTs must use Compact JWS serialization, JWT must be a string");
  const { 1: t, length: n } = e.split(".");
  if (n === 5)
    throw new ee("Only JWTs using Compact JWS serialization can be decoded");
  if (n !== 3)
    throw new ee("Invalid JWT");
  if (!t)
    throw new ee("JWTs must contain a payload");
  let r;
  try {
    r = bi(t);
  } catch {
    throw new ee("Failed to base64url decode the payload");
  }
  let s;
  try {
    s = JSON.parse(Fn.decode(r));
  } catch {
    throw new ee("Failed to parse the decoded payload as JSON");
  }
  if (!gi(s))
    throw new ee("Invalid JWT Claims Set");
  return s;
}
const Ti = (e) => {
  const [t, n] = _(!0), [r, s] = _("Built on Bedrock"), [o, i] = _("https://bedrockpassport.com"), { baseUrl: a, authCallbackUrl: l, tenantId: d } = e, [h, u] = _(""), f = vt.create({
    baseURL: `${a}/api`
  }), [m, x] = _(), [p, b] = _(), { accessToken: y, refreshToken: v, login: N, logout: B } = Ho(), U = async (w) => {
    try {
      let E = y();
      if (E) {
        const R = yi(E);
        if (R.exp && R.exp * 1e3 < Date.now()) {
          const P = v();
          if (!P)
            return B(), w;
          const W = await vt.post(`${a}/api/v1/auth/refresh`, {
            refreshToken: P,
            provider: R.provider
          }).then((de) => de.data.accessToken).catch((de) => {
            console.error(de.cause);
          });
          if (!W)
            return B(), w;
          W && (N(W, P), E = y());
        }
      }
      w.headers.Authorization = `Bearer ${E}`;
    } catch (E) {
      console.error("[interceptor.error] ", { e: E });
    }
    return w;
  };
  f.defaults.headers.common["Ocp-Apim-Subscription-Key"] = e.subscriptionKey ?? "DEMO_BEDROCK_PASSPORT_KEY", f.interceptors.request.use(U);
  const M = async (w, E) => {
    if (w === te.EMAIL && E)
      return await f.post("/v1/auth/email/login", {
        email: E.email,
        password: E.password
      }).then((P) => P.data).catch(
        (P) => {
          var W, de;
          throw console.error(P.cause), new Error(((de = (W = P.response) == null ? void 0 : W.data) == null ? void 0 : de.message) ?? "Login failed");
        }
      );
    {
      const R = Fo(a, w, l);
      window.location.href = `${R}${d ? `&tenantId=${d}` : ""}`;
    }
  }, we = q(async () => f.get("/v1/auth/user", {}).then((w) => w.data).catch((w) => {
    console.error(w.toJSON);
  }), [f]), _e = q(async () => f.get("/v1/auth/widget").then((w) => w.data).catch((w) => {
    console.error(w.toJSON);
  }), [f]), ve = q(
    async (w, E) => {
      if (!w || !E)
        return !1;
      N(w, E);
      const R = await we();
      return R ? R ? (x(R), !0) : !1 : (B(), !1);
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    []
  ), Ce = () => {
    B(), x(void 0), b(void 0), n(!0);
  };
  qt(
    () => {
      console.log("[mount.start]: Bedrock Passport");
      const w = async () => {
        const P = await we();
        P && x(P);
      }, E = async () => {
        const P = await _e();
        P && (s(P.text), i(P.url));
      }, R = async () => {
        const P = await K();
        P && b(P);
      };
      return t && (n(!1), E(), y() && (console.info("[INIT]: Token found"), w(), R())), () => {
        console.log("[mount.finish]: Bedrock Passport Provider");
      };
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [y, t]
  );
  const Ie = q(async () => f.get("/v1/message/nonce").then((w) => w.data).catch((w) => {
    console.error(w.toJSON);
  }), [f]), A = q(
    async (w, E) => f.post("/v1/message/verify", {
      message: w,
      signature: E,
      tenantId: d
    }).then((R) => R.data).catch((R) => {
      console.error(R.toJSON);
    }),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [f]
  ), ze = (w) => {
    const E = $o(a, w, l);
    window.location.href = `${E}&token=${y()}${d ? `&tenantId=${d}` : ""}`;
  }, ce = q(
    async (w, E) => (console.log("[passport.link.wallet]"), u(""), f.post("/v1/auth/identifier/wallet", {
      message: w,
      signature: E
    }).then((R) => R.data).catch((R) => {
      console.error(R.message), u("Wallet already used");
    })),
    [f]
  ), Oe = () => {
    const w = "https://bedrockpassport.com/login";
    window.location.href = `${w}?token=${y()}&refreshToken=${v()}`;
  }, le = async (w, E, R) => {
    try {
      return await f.post("/v1/auth/email/register", {
        email: w,
        password: E,
        passwordConfirm: R
      }).then((W) => W.data).catch((W) => {
        throw console.error(W.message), new Error("[BRP-005] Email registration failed");
      });
    } catch (P) {
      throw console.error("[Bedrock Passport] Email registration error:", P), P;
    }
  }, Ue = async (w) => {
    try {
      const E = await f.post(
        "/v1/auth/email/reset",
        {
          email: w
        }
      );
      if (!E.data)
        throw new Error("[BRP-005] Email registration failed");
      return E.data;
    } catch (E) {
      throw console.error("[Bedrock Passport] Email registration error:", E), E;
    }
  }, ke = async (w, E, R) => {
    try {
      const P = await f.post(
        "/v1/auth/email/password",
        {
          password: w,
          passwordConfirm: E,
          token: R
        }
      );
      if (!P.data)
        throw new Error("[BRP-007] password change failed");
      return P.data;
    } catch (P) {
      throw console.error("[Bedrock Passport] password change error:", P), P;
    }
  }, K = q(async () => f.post("/v1/economy/currency", {
    titleId: d,
    count: 10,
    inventory: "default"
  }).then((w) => w.data).catch((w) => {
    console.error(w.toJSON);
  }), [f, d]), Ge = q(async () => f.post("/v1/economy/inventoryItems", {
    titleId: d,
    count: 10,
    inventory: "default"
  }).then((w) => w.data).catch((w) => {
    console.error(w.toJSON);
  }), [f, d]), F = {
    user: m,
    signIn: M,
    signOut: Ce,
    loginCallback: ve,
    accessToken: y(),
    isLoggedIn: !!y(),
    getNonce: Ie,
    verifyNonce: A,
    linkSocial: ze,
    linkWallet: ce,
    errorWallet: h,
    setErrorWallet: u,
    widgetText: r,
    widgetUrl: o,
    linkProfile: Oe,
    registerEmail: le,
    getTokenReset: Ue,
    changePassword: ke,
    getCurrency: K,
    getItems: Ge,
    currency: p,
    apiClient: f
  };
  return /* @__PURE__ */ c(cn.Provider, { value: F, children: /* @__PURE__ */ c(
    Qo,
    {
      walletConnectProjectId: e.walletConnectId ?? "c00e7bea048e69d5adaea82259539eb6",
      appName: e.appName ?? "Bedrock Passport",
      appDescription: e.appDescription,
      appUrl: e.appUrl,
      appIcon: e.appIcon,
      baseUrl: a,
      tenantId: d,
      children: e.children
    }
  ) });
};
export {
  Ti as BedrockPassportProvider,
  Ai as LoginPanel,
  te as UserProvider,
  Fr as UserRole,
  be as useBedrockPassport,
  Ho as useBedrockToken
};
//# sourceMappingURL=index.es.js.map
